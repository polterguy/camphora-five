
/*
 * File responsible for generating app.
 *
 * Requires a [filename] argument, declaring which app to generate.
 */





/*
 * Sanity check.
 */
micro.lambda.contract.min:x:/..
  filename:string





/*
 * Figuring out app's folder name.
 */
split:x:/../*/filename?value
  =:/
  =:.





/*
 * Checking if folder exists from before, and if it does, we throw an exception.
 */
if
  fetch:x:/0/0?value
    folder-exists:/modules/{0}/
      :x:/@split/0/-2?name
  throw:Sorry, this app already exists. You must first uninstall any old versions before you can re-generate the app.





/*
 * Creating folder structure for our app.
 */
create-folder:/modules/{0}/
  :x:/@split/0/-2?name





/*
 * Copying all files and folders from "template" folder into app's folder.
 */
list-files:@CAMPHORA/template/
copy-file:x:/@list-files/*?name
  dest:/modules/{0}/
    :x:/@split/0/-2?name
list-folders:@CAMPHORA/template/
for-each:x:/-/*?name
  split:x:/@_dp?value
    =:/
  copy-folder:x:/@_dp?value
    dest:/modules/{0}/{1}/
      :x:/..for-each/@split/0/-2?name
      :x:/@split/0/-?name





/*
 * Copying file that declares our app into folder for app.
 */
copy-file:x:/../*/filename?value
  dest:/modules/{0}/helpers/app.hl
    :x:/@split/0/-2?name





/*
 * Trying to delete old database table, if it exists.
 */
try
  p5.mysql.connect:[camphora]
    p5.mysql.execute:@"drop table `{0}`"
      :x:/@split/0/-2?name
catch

  /*
   * Silent catch, since exception implies database/table didn't exist.
   */





/*
 * Evaluating startup file.
 */
micro.evaluate.file:/modules/{0}/startup.hl
  :x:/@split/0/-2?name
