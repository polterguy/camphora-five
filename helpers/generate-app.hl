/*
 * File responsible for generating a Camphora Five CRUD app from a manifest file.
 *
 * Expects a __[filename]__ argument, declaring which app to generate.
 * Optionally pass in a __[delete-data]__ argument, and set its value to boolean _"true"_
 * if you wish to delete existing data/database/table for app.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  filename:string
micro.lambda.contract.optional:x:/..
  delete-data:bool





/*
 * Figuring out app's name, which becomes its default
 * folder, and its database name.
 */
split:x:/../*/filename?value
  =:/
  =:.





/*
 * Checking if folder exists from before, and if it does, we delete it.
 */
if
  fetch:x:/0/0?value
    folder-exists:/modules/{0}/
      :x:/@split/0/-2?name
  delete-folder:/modules/{0}/
    :x:/@split/0/-2?name





/*
 * Creating folder structure for our app.
 */
copy-folder:@CAMPHORA/template/
  dest:/modules/{0}/
    :x:/@split/0/-2?name





/*
 * Making sure app manifest file is copied to 'helpers'
 * folder for app.
 */
copy-file:x:/../*/filename?value
  dest:/modules/{0}/helpers/app-manifest.hl
    :x:/@split/0/-2?name





/*
 * Checking if manifest for application specified that we should create a
 * desktop icon, or not.
 */
load-file:x:/../*/filename?value
if:x:/@load-file/*/*/desktop-icon?value
  =:bool:false

  /*
   * Deleting desktop icon for app, since app should not have one.
   */
  delete-file:/modules/{0}/desktop.hl
    :x:/@split/0/-2?name





/*
 * Creating one 'view' file from each [view] in our manifest file.
 */
for-each:x:/@load-file/*/*/views/*
  save-file:/modules/{0}/views/{1}.hl
    :x:/@split/0/-2?name
    :x:/@_dp/#?name
    src:{0}{1}
      :@"/*
 * This file was auto-generated by Camphora Five.
 *
 * Edit it at your own risk, since it might be overwritten
 * if the app is re-generated!
 */

"
      :x:/@_dp/#?value





/*
 * Trying to delete old database table, if it exists, and if caller told us to do so.
 */
if:x:/../*/delete-data?value
  try
    p5.mysql.connect:[camphora]
      p5.mysql.execute:@"drop table `{0}`"
        :x:/@split/0/-2?name
  catch

    /*
     * Silent catch, since exception implies database/table didn't exist.
     */





/*
 * Making sure we replace '{app-name}', values in all nodes, in all files,
 * inside module's folder.
 */
eval-x:x:/+/*
micro.evaluate.file:@CAMPHORA/helpers/replace-app-name.hl
  folder:/modules/{0}/
    :x:/@split/0/-2?name
  app-name:x:/@split/0/-2?name





/*
 * Creating our actual MySQL datagrid according to our CRUD app
 * manifest file's content.
 *
 * We do this by loading the "launch-implementation.hl" file and
 * modify the datagrid inside of it, according to the [field] definitions
 * found in our app manifest file.
 */
load-file:/modules/{0}/startup/widgets/camphora.widgets.datagrid.hl
  :x:/@split/0/-2?name
  convert:false
hyper2lambda:x:/@load-file/*?value
  keep-comments:true
for-each:x:@"/../*/load-file/[0,1]/*/*/field(/*/show/""=:bool:true"")/."

  /*
   * Used as a buffer for currently iterated column declaration.
   */
  .column
    foo
      .header
        widgets
          a
            href:#
            innerValue:@"{0} <span></span>"
              :x:/@_dp/#/*/name?value
            .column:x:/@_dp/#/*/name?value
            onclick

              /*
               * Getting [column] value that we should sort by.
               */
              get-widget-property:x:/../*/_event?value
                .column

              /*
               * Doing the actual sorting.
               */
              eval-x:x:/+/*
              camphora.datagrid.sort
                column:x:/@get-widget-property/*/*?value

  /*
   * Setting the column's name, forward declaring its [innerValue],
   * and all [.column] references inside of it.
   */
  set:x:/@.column/*?name
    src:x:/@_dp/#/*/name?value
  eval-x:x:/@.column/**(/innerValue|/.column)

  /*
   * Checking if this is a checkbox type of column, at which point
   * we make sure its value is displayed as a check mark if its value
   * is actually checked.
   */
  if:x:/@_dp/#/*/type?value
    =:checkbox

    /*
     * Checkbox type of column, making sure we display its value
     * as a checkmark, by making it become a [.lambda] type of column.
     */
    set:x:/+/*/*/*/foo?value
      src:x:/@_dp/#/*/name?value
    add:x:/@.column/*
      src
        .lambda
          foo

          /*
           * Checking if checkbox value should be checked.
           */
          if:x:/../*/row/*/{0}?value
            :x:/@foo?value
            =:int:1

            /*
             * We should create a checkbox icon.
             */
            return
              literal
                element:span
                class:icon-checkmark

    /*
     * Since a [.lambda] column isn't part of the SQL executed towards the
     * database, we'll need to also add an invisible column with the name of
     * our checkbox column.
     */
    set:x:/+/*/*?name
      src:x:/@_dp/#/*/name?value
    add:x:/@.column
      src
        foo
          visible:bool:false

  /*
   * Checking if this is a multiline textarea type of widget, at which point
   * we make sure we display it as pre formatted.
   */
  else-if:x:/@_dp/#/*/type?value
    =:textarea

    /*
     * Applying preformatted class to the cell.
     */
    add:x:/@.column/*
      src
        class:camphora-pre-cell

  /*
   * Adding column to [columns] declaration of MySQL datagrid.
   */
  add:x:/@hyper2lambda/**/micro.widgets.mysql.datagrid/*/columns
    src:x:/@.column/*





/*
 * Saving file again, now with [columns] declarations.
 */
lambda2hyper:x:/@hyper2lambda/*
  comments:unroll
save-file:/modules/{0}/startup/widgets/camphora.widgets.datagrid.hl
  :x:/@split/0/-2?name
  src:x:/@lambda2hyper?value





/*
 * Making sure "launch-implementation.hl" actually instantiates the correct
 * extension widget.
 */
load-file:/modules/{0}/launch-implementation.hl
  :x:/@split/0/-2?name
  convert:false
hyper2lambda:x:/@load-file/*?value
  keep-comments:true
set:x:/@hyper2lambda/**/widgets/=crud-widget/**/camphora.widgets.datagrid?name
  src:camphora.widgets.datagrid.{0}
    :x:/@split/0/-2?name
set:x:/@hyper2lambda/**/widgets/=toolbar-widget/**/camphora.widgets.toolbar?name
  src:camphora.widgets.toolbar.{0}
    :x:/@split/0/-2?name





/*
 * Saving file again, now with wizard form declarations declarations.
 */
lambda2hyper:x:/@hyper2lambda/*
  comments:unroll
save-file:/modules/{0}/launch-implementation.hl
  :x:/@split/0/-2?name
  src:x:/@lambda2hyper?value





/*
 * Creating our "insert new item" file, according to app manifest file.
 *
 * We do this by loading the "create-item.hl" file and modify the wizard
 * form collection inside of it according to what fields our app has.
 */
load-file:/modules/{0}/helpers/create-item.hl
  :x:/@split/0/-2?name
  convert:false
hyper2lambda:x:/@load-file/*?value
  keep-comments:true
add:x:/+/*
  src:x:/../*/load-file/[0,1]/*/*/field
add:x:/@hyper2lambda/*/create-widgets/**/widgets/=data
  micro.evaluate.file:@CAMPHORA/helpers/create-new-item-widgets.hl





/*
 * Saving file again, now with wizard form declarations declarations.
 */
lambda2hyper:x:/@hyper2lambda/*
  comments:unroll
save-file:/modules/{0}/helpers/create-item.hl
  :x:/@split/0/-2?name
  src:x:/@lambda2hyper?value





/*
 * Making sure that our "edit-item.hl" file knows how many visible columns
 * there are in the datagrid in total in its [.column-count] node.
 */
load-file:/modules/{0}/helpers/edit-item.hl
  :x:/@split/0/-2?name
  convert:false
hyper2lambda:x:/@load-file/*?value
  keep-comments:true
set:x:/@hyper2lambda/*/.column-count?value
  src:x:@"/../*/load-file/[0,1]/*/*/field/*/show/""=:bool:true""?count"
add:x:/+/*
  src:x:/../*/load-file/[0,1]/*/*/field
add:x:/@hyper2lambda/*/create-widget/**/widgets/=data
  micro.evaluate.file:@CAMPHORA/helpers/create-edit-item-widgets.hl





/*
 * Saving file again, now with wizard form declarations declarations.
 */
lambda2hyper:x:/@hyper2lambda/*
  comments:unroll
save-file:/modules/{0}/helpers/edit-item.hl
  :x:/@split/0/-2?name
  src:x:/@lambda2hyper?value





/*
 * Making sure that our "download-items.hl" file knows which columns to export.
 */
load-file:/modules/{0}/helpers/download-items.hl
  :x:/@split/0/-2?name
  convert:false
hyper2lambda:x:/@load-file/*?value
  keep-comments:true





/*
 * Applying all [field] declarations from app manifest file into
 * [.fields] inside of file.
 */
add:x:/@hyper2lambda/**/.fields
  src:x:@"/../*/load-file/[0,1]/*/*/field(/*/show/""=:bool:true"")/."





/*
 * Saving file again, now with column declarations.
 */
lambda2hyper:x:/@hyper2lambda/*
  comments:unroll
save-file:/modules/{0}/helpers/download-items.hl
  :x:/@split/0/-2?name
  src:x:/@lambda2hyper?value





/*
 * Making sure our "search-datagrid.hl" file knows which columns we can apply filtering
 * to, and how
 */
load-file:/modules/{0}/helpers/search-datagrid.hl
  :x:/@split/0/-2?name
  convert:false
hyper2lambda:x:/@load-file/*?value
  keep-comments:true





/*
 * Applying all [field] declarations from app manifest file into
 * [.fields] inside of file.
 */
add:x:/@hyper2lambda/*/.fields
  src:x:@"/../*/load-file/[0,1]/*/*/field(/*/show/""=:bool:true"")/."





/*
 * Saving file again, now with [columns] declarations.
 */
lambda2hyper:x:/@hyper2lambda/*
  comments:unroll
save-file:/modules/{0}/helpers/search-datagrid.hl
  :x:/@split/0/-2?name
  src:x:/@lambda2hyper?value





/*
 * Evaluating startup file for app.
 */
micro.evaluate.file:/modules/{0}/startup.hl
  :x:/@split/0/-2?name
