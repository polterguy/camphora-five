/*
 * This file is responsible for actually showing the main datagrid
 * for a Camphora Five app.
 *
 * Since the _"launch.hl"_ file for a Camphora app also loads up
 * custom views, this is the actual implementation of the default
 * view, showing your datagrid, and its toolbar for paging and
 * filtering.
 *
 * This fill will include Micro's CSS files, create a Micro CSS
 * column wire frame, and instantiate the __[camphora.xxx.widgets.datagrid]__
 * and __[camphora.xxx.widgets.toolbar]__ extension widgets on your page.
 *
 * This particular file also supports the HTTP QUERY parameters of "q" and "p",
 * that allows you to supply a URL that will query ("q") or page ("p") your
 * current result set according to the given HTTP QUERY parameters.
 */





/*
 * Changing title of page, to reflect item type.
 */
p5.web.page.set-title:{app-name}





/*
 * This is how many items should be displayed at once in our datagrid.
 *
 * Feel free to change this one as you see fit.
 */
.page-size:long:10





/*
 * Including Micro's CSS files, in addition to our main CSS
 * file for currently evaluated Camphora app.
 */
micro.css.include
p5.web.include-css-file:/modules/{0}/media/main.css
  :{app-name}





/*
 * Checking if we have an HTTP GET QUERY parameter, indicating initial
 * databind filtering.
 */
p5.web.query.get:q
if:x:/@p5.web.query.get/*?value

  /*
   * Adding query to widget instantiation, to make sure we initially
   * databind the widget towards the specified QUERY parameter.
   */
  eval-x:x:/+/*/*
  add:x:/../*/create-widget/**(/camphora.{0}.widgets.datagrid|/camphora.{0}.widgets.toolbar)
    :{app-name}
    src
      query:x:/@p5.web.query.get/*?value





/*
 * Checking if we have an HTTP GET QUERY parameter, indicating initial
 * page.
 */
p5.web.query.get:p
if:x:/@p5.web.query.get/*?value

  /*
   * Adding query to widget instantiation, to make sure we initially
   * databind the widget towards the specified QUERY parameter.
   */
  -:x:/@p5.web.query.get/*?value.long
    _:1
  eval-x:x:/+/*/*
  add:x:/../*/create-widget/**/camphora.{0}.widgets.datagrid
    :{app-name}
    src
      page:x:/@-?value





/*
 * Creating main wire frame for app, containing toolbar and datagrid.
 */
eval-x:x:/+/*/widgets/**(/page-size|/.page-size|/micro.widgets.tree/*/items/*)
create-widget:camphora-main-container
  class:container
  events


    /*
     * Help context Active Event.
     */
    desktop.help.get-context

      /*
       * Returning the root folder for Camphora's help files.
       */
      return:/modules/{0}/help-files/{0}/index.hl
        :{app-name}


  widgets


    /*
     * Row wrapping all toolbars for app.
     */
    div
      class:row
      widgets
        div
          class:col-100
          widgets


            /*
             * Our actual toolbar.
             *
             * We instantiate our toolbar widget by default such that
             * it also displays the home button, delete all button, import
             * CSV file button, etc. If you don't want these buttons, or
             * this strip to be more accurate, you can set the [main-toolbar]
             * value to "false", or modify its sub-arguments to delete only
             * specific parts of the toolbar.
             *
             * Notice, the [datagrid] argument is the widget ID of
             * your [camphora.xxx.widgets.datagrid] instance.
             */
            camphora.widgets.toolbar
              datagrid:camphora-main-datagrid
              main-toolbar:true
                import:true
                export:true
              filter-toolbar:true
                filter:true
                pager:true
                create:true

            /*
             * Column wrapping the header of application.
             */
            div
              class:left
              widgets

                /*
                 * This is just a simple header, displaying some information
                 * to the user, according to how many items and such there exists
                 * in the current dataset (according to filter criteria).
                 *
                 * It is modified in the Active Event sinks further down in page.
                 */
                literal:camphora-app-header
                  element:h4
                  class:camphora-header


    /*
     * Row wrapping view TreeView "navbar".
     */
    div:camphora-navbar
      class:row
      widgets
        div
          class:col-100
          widgets


            /*
             * This serves as a "navbar" allowing the user to.
             * navigate all views for the app.
             *
             * Notice, you can create multiple folders inside of your "/views/"
             * folder, and also an entire folder structure as you see fit, to
             * create a hierarchical navbar, grouping similar concepts together.
             *
             * Notice, even though each view is arguably created as a "page", with
             * its own unique URL - This navbar will attempt to "inject" the view
             * into a view container, if possible, with a "close view" button, which
             * will delete the view once clicked. This gives you a single page app
             * feeling, with a highly responsive Ajax interface.
             *
             * Whether or not the view is possible to "inject" into a view container
             * or not, is determined according to whether or not the view has a
             * [create-widget] or a [create-container-widget] invocation at its root.
             *
             * If the view does not contain one of the above Active Event invocations,
             * the view will simply be evaluated "as is".
             *
             * Notice, if the view does not create widgets at all at root, we redirect
             * the client to the view's main URL.
             *
             * Regardless of how the view is viewed, the database ID of any currently
             * edited item from your datagrid will be passed in as an argument when
             * the view is evaluated or viewed.
             *
             * The above logic can be found in the "/helpers/select-view.hl" file.
             */
            micro.widgets.tree
              class:micro-widgets-tree micro-widgets-tree-navbar camphora-navbar
              items
                Views:/modules/{0}/views/
                  :{app-name}

              /*
               * Invoked when user expands an item in the navbar.
               */
              .onexpand

                /*
                 * Evaluating file responsible for retrieving views as a
                 * tree view [items] collection.
                 */
                eval-x:x:/+/*/folder
                micro.evaluate.file:/modules/{0}/helpers/expand-navbar.hl
                  :{app-name}
                  folder:x:/../*/_item-id?value
                  datagrid:camphora-main-datagrid
                return:x:/@micro.evaluate.file/*

              /*
               * Invoked when user selects an item in the navbar.
               */
              .onselect

                /*
                 * Checking if this is a folder, at which point we return early.
                 */
                if
                  ends-with:x:/../*/items/0?name
                    src:.hl
                  =:bool:false
                  return

                /*
                 * Retrieving the currently selected item's database ID,
                 * in case the view needs it.
                 */
                camphora.datagrid.edited-item-id:camphora-main-datagrid

                /*
                 * Evaluating file responsible for loading up the currently
                 * selected view, forward evaluating arguments, and passing in
                 * [id] of currently selected record, if any.
                 */
                add:x:/+2
                  src:x:/./-/*
                eval-x:x:/+/*/view
                micro.evaluate.file:/modules/{0}/helpers/select-view.hl
                  :{app-name}
                  view:x:/../*/items/0?name


    /*
     * Main row wrapping our MySQL datagrid.
     */
    div
      class:row
      widgets
        div
          class:col-100
          widgets

            /*
             * Our actual datagrid.
             *
             * We instantiate the widget such that it allows for editing
             * and deletion of items. If you don't want this feature, you
             * can change the [edit-items] value to "false".
             *
             * In addition we make sure the datagrid displays 10 items in
             * each "page". Feel free to change the [page-size] argument
             * if you want to display more or less items at the same time.
             */
            camphora.widgets.datagrid:camphora-main-datagrid
              page-size:x:/../*/.page-size?value
              edit:true
              delete:true
              headers:true

          /*
           * Supporting widget lambda events, that are subscribers
           * to events raise by the Camphora widgets internally.
           */
          events


            /*
             * Invoked when for some reasons the datagrid has been databound.
             * The datagrid ID will be given as [_arg], the current page as
             * [page], whether nor not the datagrid has more pages as a boolean
             * [more-pages], and the total number of items matching the current
             * filter as [count].
             *
             * In this widget lambda event, we simply set the label's [innerValue]
             * to the total number of items matching the [filter].
             */
            camphora.datagrid.databound

              /*
               * Checking if this is "our" datagrid.
               */
              if:x:/../*/_arg?value
                !=:camphora-main-datagrid
                return

              /*
               * Checking if the current filter contains more items
               * than we have room for in one page.
               */
              .page-size:x:/../*/.page-size?value
              if:x:/../*/count?value
                <=:x:/@.page-size?value

                /*
                 * Current page shows all items in filter.
                 *
                 * Checking number of items, and modifying the header accordingly.
                 */
                if:x:/../*/count?value.long
                  =:long:1

                  /*
                   * Only 1 record matching current filter.
                   */
                  set-widget-property:camphora-app-header
                    innerValue:1 record of type '{0}'
                      :{app-name}

                else-if:x:/../*/count?value.long
                  =:long:0

                  /*
                   * No matching records.
                   */
                  set-widget-property:camphora-app-header
                    innerValue:No records of type '{0}'
                      :{app-name}

                else

                  /*
                   * More than 1 matching record matching our current filter.
                   */
                  set-widget-property:camphora-app-header
                    innerValue:{0} records of type '{1}'
                      :x:/../*/count?value
                      :{app-name}

              else

                /*
                 * We don't have room for all filtered records in one page.
                 * Modifying [innerValue] to contain record count in addition
                 * to the current page number.
                 */
                +:x:/../*/page?value
                  _:1
                set-widget-property:camphora-app-header
                  innerValue:Page {0} of {1} records of type '{2}'
                    :x:/@+?value
                    :x:/../*/count?value
                    :{app-name}
