
/*
 * Creates the Active Event that transforms Markdown to HTML, 
 * adding #hash-tag links in the process, and adding up rel="noreferrer", etc.
 *
 * Requires [app-name] as argument.
 */
create-event:camphora._internal.html.markdown2html

  /*
   * Sanity check.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
    app-name:string

  /*
   * Transforming Markdown to HTML.
   */
  markdown2html:x:/../*/_arg?value

  /*
   * Converting HTML semantically to lambda, to be able to intelligently parse it.
   */
  html2lambda:x:/@markdown2html?value

  /*
   * Running through each hyperlink that doesn't have a [@target], and making
   * sure it gets a '_blank' target.
   */
  for-each:x:/@html2lambda/**(/a!/a/*/\@target/.)
    add:x:/@_dp/#
      src
        @target:_blank

  /*
   * Running through each img tag, and making sure it gets some default sane
   * styling, unless it already has a style tag.
   */
  for-each:x:/@html2lambda/**/img(!/*/style/.)
    add:x:/@_dp/#
      src
        @style:"float:left;border-radius:5px;margin-right:15px;max-width:70%;"

  /*
   * Running through each hyperlink, and making sure every hyperlink displays its
   * actual domain as a part of its anchor text, in addition to a rel="noreferrer" 
   * attribute.
   *
   * Notice, this is a security feature, which prevents a malicous file editor/user
   * to create hyperlinks, leading to URLs, which are "cloaked".
   *
   * Although this is technically unlikely to occur, since only registered users
   * can edit files - In theory, an unintentional link, leading to a malicous website,
   * could sneak in, through a user account, allowed to edit files here in the system.
   *
   * By simply displaying the root domain for each URL, we reduce the risk of 
   * such phishing" attacks significantly, by displaying the domain all links
   * leads to, to a user, before he clicks the links.
   *
   * In addition, we add up an explicit rel='noreferrer' to all hyperlinks, to
   * make sure any links visited, never knows the origin of the visitor, and which
   * website the visitor comes from.
   *
   * This is basically super defensive coding" in practive!!
   */
  for-each:x:/@html2lambda/**/a
    split:x:/@_dp/#/*/\@href?value
      =:"//"
    split:x:/@split/0/-?name
      =:/
    set:x:/@_dp/#/*/\#text?value
      src:{0} (<strong>{1}</strong>)
        :x:/@_dp/#/*/\#text?value
        :x:/@split/0?name

    /*
     * Removing any previous "rel" attributes, before we add our own.
     */
    set:x:/@_dp/#/*/rel
    add:x:/@_dp/#
      src
        @rel:noreferrer

  /*
   * Running through "whitelist", making sure that content does not contain malicious HTML elements.
   *
   * Basically, this will remove everything not found in our "/configuration/html-whitelist.hl" file.
   *
   * Notice, our sub-set of legal HTML elements here, is quite small.
   * For instance, it is not legally allowed to display images in any ways!
   */
  load-file:/modules/{0}/configuration/html-whitelist.hl
    :x:/@app-name?value
  for-each:x:/@html2lambda/**
    if:x:/@load-file/*/*/\{0}
      :x:/@_dp/#?name
      not

      /*
       * HTML tag or attribute was not on whitelist, simply removing it.
       */
      set:x:/@_dp/#

  /*
   * Converting lambda back to HTML, now with styling for all images.
   */
  lambda2html:x:/@html2lambda/*

  /*
   * Converting all hyperlinks within content that are not explicitly set to hyperlinks to such.
   *
   * Notice, this invocation will ignore any hyperlinks already created by our above [markdown2html] invocation.
   */
  eval-x:x:/+/*
  camphora._internals.html.create-hyperlinks-and-tags:x:/@lambda2html?value
    app-name:x:/../*/app-name?value

  /*
   * Returning HTML created above.
   */
  return:x:/@camphora._internals.html.create-hyperlinks-and-tags?value
