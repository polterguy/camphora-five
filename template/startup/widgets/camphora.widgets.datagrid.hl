/*
 * This file creates the __[camphora.xxx.widgets.datagrid]__ extension widget.
 */

/*
 * This extension widget allows you to display your Camphora Five
 * CRUD app as a widget, injecting the entire app's datagrid,
 * anywhere on your page. The event optionally takes the following
 * arguments.
 *
 * - __[edit-items]__ - Whether or not editing (and hence deletion) of items should be allowed.
 * The default value for this argument is boolean _"false"_.
 * - __[delete-items]__ - Whether or not deletion of individual items, and all filtered items should be allowed.
 * The default value for this argument is boolean _"false"_.
 * - __[page-size]__ - Number of items the datagrid should display. The default value for this argument is 25.
 * - __[query]__ - Optional initial search query to databind the datagrid towards.
 * - __[page]__ - Optional initial page to databind the datagrid towards.
 * - __[.row]__ - Optional argument allowing you to completely replace your entire datagrid's _".row"_ argument.
 *
 * __Notice__, this extension widget is dynamically created for each of your Camphora Five apps,
 * and its exact name varies from app to app, since its name is replaced when the app is generated.
 *
 * The __[.row]__ argument allows you to completely control the rendering of the datagrid's _"tr"_ elements
 * for each row in your datagrid, allowing you (to among other things) override editing of items if you wish.
 * Or change the style/class properties of your rows, etc. If you supply your own __[.row]__ argument, all
 * event handlers inside of it (such as __[onclick]__ for instance) will automatically get the entire
 * database row passed in as an argument named __[.row]__. This allows you to determine what item the
 * user clicked by checking [.row]/[id] in your onclick event handlers.
 *
 * __Notice__, if you override the __[.row]__ with your own row, you can still use the __[camphora.datagrid.row-clicked]__
 * widget lambda event to allow for the default editing to occur. Just remember to pass in __[database-id]__,
 * __[row-widget-id]__ (widget ID of your "tr" element) and __[\_arg]__ being the widget id for your actual datagrid.
 * See the main documentation for Camphora Five to understand how to accomplish this.
 */
create-event:camphora.widgets.datagrid

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.optional:x:/..
    edit-items:bool
    delete-items:bool
    page-size:long
    query:string
    page:long
    .row

  /*
   * Defaults.
   */
  .defaults
    edit-items:bool:false
    delete-items:bool:false
    page-size:long:10
    page:long:0
    class:hover camphora-datagrid

  /*
   * Checking if we should prevent editing (and deletion) of items.
   */
  if:x:(/../*/edit-items|/@.defaults/*/edit-items)/$?value.bool
    =:bool:false

    /*
     * Removing [.row]'s [onclick] event handler.
     */
    set:x:/../*/return/*/micro.widgets.mysql.datagrid/*/.row/*/onclick

  else

    /*
     * Making sure we create rows such that the user gets a visual clue that
     * he can click the rows in his grid.
     */
    add:x:/../*/return/*/micro.widgets.mysql.datagrid/*/.row
      src
        class:camphora-grid-editable

    /*
     * Checking if we should allow for deleting items.
     */
    if:x:(/../*/delete-items|/@.defaults/*/delete-items)/$?value.bool
      =:bool:true

      /*
       * Adding "delete item" row.
       */
      add:x:/../*/return/*/micro.widgets.mysql.datagrid/*/columns
        src
          Delete
            class:camphora-delete-cell
            .header
              widgets
                a
                  href:#
                  class:button
                  onclick

                    /*
                     * Evaluates file responsible for actually deleting filtered items.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .datagrid
                    eval-x:x:/+/*/datagrid
                    micro.evaluate.file:/modules/{0}/helpers/delete-all-filtered-items.hl
                      :{app-name}
                      datagrid:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                  widgets
                    literal
                      element:span
                      class:icon-bin
            .lambda
              eval-x:x:/+/*/*/onclick/*/.id
              return
                a
                  href:#
                  class:button
                  innerValue:@"<span class=""icon-bin""></span>"
                  onclick

                    /*
                     * Forward evaluated above.
                     */
                    .id:x:/../*/row/*/id?value

                    /*
                     * Figuring out ID of datagrid, which is needed later down
                     * for our widget lambda event invocations.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .datagrid

                    /*
                     * Opening database connection.
                     */
                    p5.mysql.connect:[camphora]

                      /*
                       * Deleting item from database.
                       */
                      p5.mysql.delete:delete from `{0}` where id = @id
                        :{app-name}
                        @id:x:/@.id?value

                    /*
                     * Re-databinding datagrid, making sure we keep our current
                     * [filter], [page], [order-by] and [order-dir] arguments.
                     */
                    camphora.datagrid.databind:x:/@p5.web.widgets.find-first-ancestor/*/*?value

  /*
   * Checking if we should provide a default query.
   */
  if:x:/../*/query?value
    and:x:/../*/query?value
    !=:

    /*
     * Making sure our initial databind invocation contains our query.
     */
    set:x:/../*/return/*/*/oninit/*/.query?value
      src:x:/../*/query?value

  /*
   * Checking if caller supplied his own [.row] argument, at which point we
   * completely drop the default row, and rather use the caller's [.row].
   *
   * This will completely bypass the default [onclick] (among other things) on
   * the datagrid, effectively preventing editing of items, unless caller
   * implements his own editing during [onclick] or something.
   */
  if:x:/../*/.row

    /*
     * Removing default [.row].
     */
    set:x:/../*/return/*/micro.widgets.mysql.datagrid/*/.row

    /*
     * Adding caller's [.row] argument.
     */
    add:x:/../*/return/*/micro.widgets.mysql.datagrid
      src:x:/../*/.row

  /*
   * Returning actual widget to caller, making sure we forward
   * evaluate any arguments.
   */
  eval-x:x:/+/*/*(/page-size|/oninit/*/.page|/class)
  return
    micro.widgets.mysql.datagrid
      .datagrid
      .row
        onclick

          /*
           * Evaluating file responsible for allowing the user to edit some item.
           */
          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
            .datagrid
          eval-x:x:/+/*
          camphora.datagrid.row-clicked:x:/@p5.web.widgets.find-first-ancestor/*/*?value
            row-widget-id:x:/../*/_event?value
            database-id:x:/../*/.row/*/id?value

      database:camphora
      table:{app-name}
      page-size:x:(/../*/page-size|/@.defaults/*/page-size)/$?value.long
      class:x:(/../*/class|/@.defaults/*/class)/$?value
      databind:bool:false
      oninit

        /*
         * Added before instantiation.
         */
        .query
        .page:x:(/../*/page|/@.defaults/*/page)/$?value

        /*
         * Checking if caller provided an initial [query] argument, at which
         * point we databind the datagrid towards that given query, instead
         * of invoking the default databind event.
         */
        if:x:/@.query?value

          /*
           * Initial databind query was given.
           */
          eval-x:x:/+/*
          camphora.datagrid.search:x:/../*/_event?value
            filter:x:/@.query?value
            page:x:/@.page?value

        else

          /*
           * Making sure we use our internal databind event, since we don't
           * databind the datagrid by default.
           *
           * This ensures that we get to correctly enable/disable our pager buttons,
           * since the databind widget lambda event checks the return value from
           * the MySQL datagrid's databind invocation, and acts accordingly.
           */
          eval-x:x:/+/*
          camphora.datagrid.databind:x:/../*/_event?value
            page:x:/@.page?value


      /*
       * Our column definition.
       *
       * Notice, this one is dynamically built during the "generate" process,
       * when app is generated.
       */
      columns
        id
          visible:bool:false


      /*
       * Widget lambda events for our datagrid.
       *
       * This wraps the "API" for our datagrid.
       */
      events


        /*
         * Invoked when for some reasons a row was clicked.
         * This event expects at the minimum the following arguments.
         * - __[\_arg]__ - Datagrid's widget id.
         * - __[database-id]__ - The database ID of the item for the row that was clicked.
         * - __[row-widget-id]__ - The widget id of the "tr" element for your row.
         *
         * In this event we simply create our default "edit item" widget.
         */
        camphora.datagrid.row-clicked

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
            database-id:long
            row-widget-id:string


          /*
           * Evaluating file responsible for creating our "edit item" widget.
           */
          eval-x:x:/+/*
          micro.evaluate.file:/modules/{0}/helpers/edit-item.hl
            :{app-name}
            datagrid:x:/../*/_arg?value
            id:x:/../*/database-id?value
            row-widget-id:x:/../*/row-widget-id?value


        /*
         * Creates a new item by displaying a modal widget to
         * user, and allowing him or her to fill in the values
         * for the new item.
         *
         * Pass in [_arg] as the datagrid you want to create a new
         * item for.
         */
        camphora.create-new-item

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string

          /*
           * Evaluating file responsible for creating a new record.
           */
          eval-x:x:/+/*
          micro.evaluate.file:/modules/{0}/helpers/create-item.hl
            :{app-name}
            datagrid:x:/../*/_arg?value


        /*
         * Downloads entire database of your Camphora app as a CSV file.
         *
         * Pass in [_arg] as the datagrid you want to download items for.
         */
        camphora.download-items

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Evaluating file responsible for exporting items to client.
           */
          eval-x:x:/+/*
          micro.evaluate.file:/modules/{0}/helpers/download-items.hl
            :{app-name}
            datagrid:x:/../*/_arg?value


        /*
         * Sorts the datagrid according to the given [column].
         *
         * This event will not remove the current [filter] or tamper
         * with it in any ways. This allows you to sort with the current
         * [filter] being active.
         *
         * Optionally pass in [order-dir] being "asc" or "desc" to sort
         * ascending or descending.
         */
        camphora.datagrid.sort

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            column:string
            order-dir:string
            _arg:string

          /*
           * Evaluating file responsible for creating a new record.
           */
          eval-x:x:/+/*(/column|/datagrid|/order-dir)
          micro.evaluate.file:/modules/{0}/helpers/sort-datagrid.hl
            :{app-name}
            column:x:/../*/column?value
            order-dir:x:/../*/order-dir?value
            datagrid:x:/../*/_arg?value


        /*
         * Convenience event to avoid having to manually construct your own filter.
         *
         * Applies the given [filter] as a [filter] condition to the [_arg] datagrid,
         * to allow for searching through the datagrid in an easier fashion
         * than to manually having to construct the [filter] condition and
         * invoke databind manually.
         *
         * This widget lambda event will construct a "like" type of condition
         * for each textbox/textarea, and an "equal" type of condition for most
         * other fields in your Camphora app.
         *
         * All conditions will be OR'ed together, resulting in a [filter] to
         * our [camphora.datagrid.databind] invocation.
         */
        camphora.datagrid.search

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
            filter:string
          micro.lambda.contract.optional:x:/..
            page:long

          /*
           * Checking if caller provided a [page] argument.
           */
          if:x:/../*/page?value
            add:x:/../*/micro.evaluate.file
              src:x:/../*/page

          /*
           * Evaluating file responsible for creating a new record.
           */
          eval-x:x:/+/*(/filter|/datagrid)
          micro.evaluate.file:/modules/{0}/helpers/search-datagrid.hl
            :{app-name}
            datagrid:x:/../*/_arg?value
            filter:x:/../*/filter?value


        /*
         * Pages datagrid to previous page.
         */
        camphora.datagrid.page.previous

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string

          /*
           * Decrementing page property, making sure we never go beneath zero.
           */
          camphora.datagrid.page:x:/../*/_arg?value
          if:x:/-/*?value
            =:long:0
            return
          -:x:/-2/*?value
            _:1
          eval-x:x:/+/*
          camphora.datagrid.page:x:/../*/_arg?value
            value:x:/@-?value

          /*
           * Re-databinding datagrid.
           */
          camphora.datagrid.databind:x:/../*/_event?value


        /*
         * Pages the specified [_arg] datagrid to next page.
         */
        camphora.datagrid.databind.next

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string

          /*
           * Decrementing page property.
           */
          camphora.datagrid.page:x:/../*/_arg?value
          +:x:/-/*?value
            _:1
          eval-x:x:/+/*
          camphora.datagrid.page:x:/../*/_arg?value
            value:x:/@+?value

          /*
           * Re-databinding datagrid.
           */
          camphora.datagrid.databind:x:/../*/_arg?value


        /*
         * Databinds the specified [_arg] datagrid.
         *
         * This is a more "low level" event than [camphora.datagrid.search],
         * and allows you to completely control every aspect of your filtering,
         * paging, etc, entirely if you wish.
         *
         * Optionally pass in [filter], [page], [order-by] and [order-dir].
         * If these arguments are not given, the event will determine the current
         * persistent property values of these arguments from the associated
         * property events.
         */
        camphora.datagrid.databind

          /*
           * Signal node to separate arguments from the rest of our lambda.
           */
          .signal

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
          micro.lambda.contract.optional:x:/..
            filter
            page
            order-by
            order-dir

          /*
           * Evaluating "databind grid" Hyperlambda file.
           */
          eval-x:x:/+2/*/datagrid
          add:x:/+
            src:x:/@.signal/--/<-(!/_event!/_arg)
          micro.evaluate.file:/modules/{0}/helpers/databind-grid.hl
            :{app-name}
            datagrid:x:/../*/_arg?value


        /*
         * Imports the specified [file] file into the specified [_arg]
         * datagrid's database.
         *
         * Notice, this event expects the file given to be a CSV file,
         * and that it matches your columns from your Camphora app.
         *
         * It also expects the CSV file to have headers, implying the
         * first row in your CSV file must conform with your column
         * structure, as defined through its [field] values when creating
         * your app.
         */
        camphora.database.import-csv-file

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
            file:string

          /*
           * Evaluating "upload CSV file" Hyperlambda file.
           */
          eval-x:x:/+/*(/file|/datagrid)
          micro.evaluate.file:/modules/{0}/helpers/import-csv-file.hl
            :{app-name}
            file:x:/../*/file?value
            datagrid:x:/../*/_arg?value

          /*
           * Re-databinding datagrid, making sure we reset all filter,
           * and other properties for our datagrid.
           */
          camphora.datagrid.databind:x:/../*/_arg?value
            filter
            page
            order-by
            order-dir


        /*
         * Deletes all items from our database for the specified [_arg] datagrid.
         *
         * Will display a modal widget, asking the user to confirm deletion before
         * actually deleting any items.
         */
        camphora.database.delete-all-items

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string

          /*
           * Evaluates file responsible for actually deleting all items.
           */
          eval-x:x:/+/*/datagrid
          micro.evaluate.file:/modules/{0}/helpers/delete-all-items.hl
            :{app-name}
            datagrid:x:/../*/_arg?value


        /*
         * Updates an existing item in the database for the specified [_arg] datagrid.
         *
         * Expects a collection of column/values as arguments, and at the minimum
         * an [id] argument, declaring which record id we should update - In addition
         * to at least one other argument, which must be a reference to a column in
         * our database.
         */
        camphora.database.update

          /*
           * Signal node to separate arguments from the rest of our lambda.
           */
          .signal

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
            id:long

          /*
           * Evaluating "update item" Hyperlambda file.
           */
          add:x:/+2
            src:x:/@.signal/--/<-(!/_event!/_arg)
          eval-x:x:/+/*/datagrid
          micro.evaluate.file:/modules/{0}/helpers/update-item.hl
            :{app-name}
            datagrid:x:/../*/_arg?value


        /*
         * Inserts a new item into the database for the specified [_arg] datagrid.
         *
         * Expects a collection of column/values as arguments.
         * These arguments must be references to actual columns in your
         * database.
         */
        camphora.database.insert

          /*
           * Signal node to separate arguments from the rest of our lambda.
           */
          .signal

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string

          /*
           * Evaluating "insert item" Hyperlambda file.
           */
          add:x:/+2
            src:x:/@.signal/--/<-(!/_event!/_arg)
          eval-x:x:/+/*/datagrid
          micro.evaluate.file:/modules/{0}/helpers/insert-item.hl
            :{app-name}
            datagrid:x:/../*/_arg?value


        /*
         * These next events are "properties" of your datagrid, such as its
         * current "page", "filter", and so on.
         */


        /*
         * Sets or gets the current [page] property for the specified [_arg] datagrid
         * to the specified [value], or zero if no value is given.
         */
        camphora.datagrid.page

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
          micro.lambda.contract.optional:x:/..
            value

          /*
           * Checking if this is a "set" invocation or a "get" invocation.
           */
          if:x:/../*/value

            /*
             * Then checking if it's not a 'set to null' invocation.
             */
            if:x:/../*/value?value

              /*
               * Some actual value for our property value.
               */
              p5.web.viewstate.set:camphora.{0}.datagrid.page.{1}
                :{app-name}
                :x:/../*/_arg?value
                src:x:/../*/value?value

            else

              /*
               * 'Set to null' invocation.
               */
              p5.web.viewstate.set:camphora.{0}.datagrid.page.{1}
                :{app-name}
                :x:/../*/_arg?value

          else

            /*
             * "get" invocation, returning current value to caller.
             */
            p5.web.viewstate.get:camphora.{0}.datagrid.page.{1}
              :{app-name}
              :x:/../*/_arg?value
            if:x:/-/*?value

              /*
               * We have a current value for our "page" property.
               */
              eval-x:x:/+/*
              return
                page:x:/@p5.web.viewstate.get/*?value.long

            else

              /*
               * We don't have a current value for our "page" property.
               */
              return
                page:long:0


        /*
         * Sets or gets the current [order-by] property for the specified [_arg] datagrid
         * to the specified [value], or null if no value is given.
         */
        camphora.datagrid.order-by

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
          micro.lambda.contract.optional:x:/..
            value

          /*
           * Checking if this is a "set" invocation or a "get" invocation.
           */
          if:x:/../*/value

            /*
             * Then checking if it's not a 'set to null' invocation.
             */
            if:x:/../*/value?value

              /*
               * Some actual value for our property value.
               */
              p5.web.viewstate.set:camphora.{0}.datagrid.order-by.{1}
                :{app-name}
                :x:/../*/_arg?value
                src:x:/../*/value?value

            else

              /*
               * 'Set to null' invocation.
               */
              p5.web.viewstate.set:camphora.{0}.datagrid.order-by.{1}
                :{app-name}
                :x:/../*/_arg?value

          else

            /*
             * "get" invocation, returning current value to caller, but
             * only if there actually is a value for property.
             */
            p5.web.viewstate.get:camphora.{0}.datagrid.order-by.{1}
              :{app-name}
              :x:/../*/_arg?value
            if:x:/-/*?value
              eval-x:x:/+/*
              return
                order-by:x:/@p5.web.viewstate.get/*?value


        /*
         * Sets or gets the current [order-dir] property for the specified [_arg] datagrid
         * to the specified [value], or null if no value is given.
         */
        camphora.datagrid.order-dir

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
          micro.lambda.contract.optional:x:/..
            value

          /*
           * Checking if this is a "set" invocation or a "get" invocation.
           */
          if:x:/../*/value

            /*
             * Then checking if it's not a 'set to null' invocation.
             */
            if:x:/../*/value?value

              /*
               * Some actual value for our property value.
               */
              p5.web.viewstate.set:camphora.{0}.datagrid.order-dir.{1}
                :{app-name}
                :x:/../*/_arg?value
                src:x:/../*/value?value

            else

              /*
               * 'Set to null' invocation.
               */
              p5.web.viewstate.set:camphora.{0}.datagrid.order-dir.{1}
                :{app-name}
                :x:/../*/_arg?value

          else

            /*
             * "get" invocation, returning current value to caller, but
             * only if there actually is a value for property.
             */
            p5.web.viewstate.get:camphora.{0}.datagrid.order-dir.{1}
              :{app-name}
              :x:/../*/_arg?value
            if:x:/-/*?value
              eval-x:x:/+/*
              return
                order-dir:x:/@p5.web.viewstate.get/*?value


        /*
         * Sets or gets the current [filter] property for the specified [_arg] datagrid
         * to the specified [value], or null if no value is given.
         */
        camphora.datagrid.filter

          /*
           * Checking that this is the grid caller is referencing.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value
            return

          /*
           * Sanity checking invocation.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
          micro.lambda.contract.optional:x:/..
            value

          /*
           * Checking if this is a "set" invocation or a "get" invocation.
           */
          if:x:/../*/value

            /*
             * Then checking if it's not a 'set to null' invocation.
             */
            if:x:/../*/value?value

              /*
               * Some actual value for our property value.
               */
              add:x:/+2/*/*
                src:x:/../*/value/*
              eval-x:x:/+/*/*
              p5.web.viewstate.set:camphora.{0}.datagrid.filter.{1}
                :{app-name}
                :x:/../*/_arg?value
                src
                  filter:x:/../*/value?value

            else

              /*
               * 'Set to null' invocation.
               */
              p5.web.viewstate.set:camphora.{0}.datagrid.filter.{1}
                :{app-name}
                :x:/../*/_arg?value

          else

            /*
             * "get" invocation, returning current value to caller, but
             * only if there actually is a value for property.
             */
            p5.web.viewstate.get:camphora.{0}.datagrid.filter.{1}
              :{app-name}
              :x:/../*/_arg?value
            if:x:/-/*/*
              add:x:/+
                src:x:/@p5.web.viewstate.get/*/*
              return
