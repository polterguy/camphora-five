/*
 * This is a _"template file"_, implying this file will be copied into
 * your Camphora Five generated app's folder when your app is generated,
 * and possibly modified to reflect your app's name/structure.
 *
 * This file creates your Camphora Five module's database, unless it already exists from before.
 */





/*
 * Iterating through each [field] from app's manifest file, dynamically
 * create our "CREATE SCHEMA" and MODIFY TABLE SQLs.
 */
.fields
.cols
.cols-changed
for-each:x:/@.fields/*

  /*
   * Appending currently iterated column to [.cols] above, according to
   * what [type] of [field] it is.
   */
  switch:x:/@_dp/#/*/type?value
    case:text
    case:radio
    case:select
      set:x:/@.cols?value
        src:{0}{1}
          :x:/@.cols?value
          :@"`{0}` varchar(512) collate utf8mb4_unicode_ci null,
  "
            :x:/@_dp/#/*/name?value
      set:x:/@.cols-changed?value
        src:{0}{1}
          :x:/@.cols-changed?value
          :@"
  alter table `{0}` modify `{1}` varchar(512) collate utf8mb4_unicode_ci null;
  alter table `{0}` add `{1}` varchar(512) collate utf8mb4_unicode_ci null;"
            :{app-name}
            :x:/@_dp/#/*/name?value
    case:user
      set:x:/@.cols?value
        src:{0}{1}
          :x:/@.cols?value
          :@"`{0}` varchar(100) collate utf8mb4_unicode_ci null,
  "
            :x:/@_dp/#/*/name?value
      set:x:/@.cols-changed?value
        src:{0}{1}
          :x:/@.cols-changed?value
          :@"
  alter table `{0}` modify `{1}` varchar(100) collate utf8mb4_unicode_ci null;
  alter table `{0}` add `{1}` varchar(100) collate utf8mb4_unicode_ci null;"
            :{app-name}
            :x:/@_dp/#/*/name?value
    case:checkbox
    case:number
      set:x:/@.cols?value
        src:{0}{1}
          :x:/@.cols?value
          :@"`{0}` int(10) null,
  "
            :x:/@_dp/#/*/name?value
      set:x:/@.cols-changed?value
        src:{0}{1}
          :x:/@.cols-changed?value
          :@"
  alter table `{0}` modify `{1}` int(10) null;
  alter table `{0}` add `{1}` int(10) null;"
            :{app-name}
            :x:/@_dp/#/*/name?value
    case:created
      set:x:/@.cols?value
        src:{0}{1}
          :x:/@.cols?value
          :@"`{0}` datetime not null default current_timestamp,
  "
            :x:/@_dp/#/*/name?value
      set:x:/@.cols-changed?value
        src:{0}{1}
          :x:/@.cols-changed?value
          :@"
  alter table `{0}` modify `{1}` datetime not null default current_timestamp;
  alter table `{0}` add `{1}` datetime not null default current_timestamp;"
            :{app-name}
            :x:/@_dp/#/*/name?value
    case:textarea
    case:markdown
      set:x:/@.cols?value
        src:{0}{1}
          :x:/@.cols?value
          :@"`{0}` longtext collate utf8mb4_unicode_ci null,
  "
            :x:/@_dp/#/*/name?value
      set:x:/@.cols-changed?value
        src:{0}{1}
          :x:/@.cols-changed?value
          :@"
  alter table `{0}` modify `{1}` longtext collate utf8mb4_unicode_ci null;
  alter table `{0}` add `{1}` longtext collate utf8mb4_unicode_ci null;"
            :{app-name}
            :x:/@_dp/#/*/name?value





/*
 * Creating database for app, unless it already exists.
 */
try

  /*
   * Necessary to parametrize our schema declarations.
   */
  p5.config.get:p5.data.prefix

  /*
   * Notice, if this invocation throws an exception, it means that our database
   * doesn't exist, which we're catching further down, and handling correctly,
   * by creating our schema, and invoking "self" again recursively.
   */
  p5.mysql.connect:[camphora]

    /*
     * Will create the table if it doesn't exist.
     */
    p5.mysql.execute:@"
create table if not exists `{0}` (
  `id` int(10) unsigned not null auto_increment,
  {1}primary key (`id`),
  unique key `id_unique` (`id`)
) engine=InnoDB auto_increment=0 default charset=utf8mb4 collate=utf8mb4_unicode_ci;"
      :{app-name}
      :x:/@.cols?value

    /*
     * Creates a procedure that will modify our table, to add any missing columns.
     *
     * Notice, this is a little bit of a MySQL trickery, where we inform MySQL
     * that we simply want it to comtinue in case the column already exists, instead of
     * aborting and raising an exception.
     *
     * This implies that all our "ALTER TABLE" queries, created above will execute,
     * even if one of our columns already exists from before.
     *
     * However, we'll have to actually create a stored procedure to make this logic work,
     * and invoke our procedure instead of directly evaluating the SQL.
     */
    p5.mysql.execute:@"
create procedure {0}camphora_foo ()
begin
  declare continue handler for 1060 begin end;
  declare continue handler for 1054 begin end;{1}
end"
      :x:/@p5.config.get/*?value
      :x:/@.cols-changed?value

    /*
     * Making absolutely sure we're able to drop our procedure.
     */
    try

      /*
       * Invokes our "modify tables" procedure.
       */
      p5.mysql.execute:@"call {0}camphora_foo()"
        :x:/@p5.config.get/*?value

    finally

      /*
       * Drops our "modify table" procedure.
       */
      p5.mysql.execute:@"drop procedure {0}camphora_foo"
        :x:/@p5.config.get/*?value

catch

  /*
   * Attempting to create database, unless this is our second invocation, for then
   * to invoke self again, for simplicity reasons.
   */
  if:x:/../*/second?value
    not

    /*
     * Making sure we prepend the database prefix in front of schema name.
     */
    p5.config.get:p5.data.prefix

    /*
     * Creating database schema.
     */
    p5.mysql.connect:[sys]
      p5.mysql.execute:@"create schema `{0}camphora`;"
        :x:/@p5.config.get/*?value

    /*
     * Invoking self, with [second] being true, to avoid never ending recursion.
     */
    micro.evaluate.file:x:/..?name
      second:bool:true

    /*
     * Returning early, to avoid evaluating the rest of our file twice.
     */
    return
