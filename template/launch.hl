
/*
 * Launcher file for Camphora Five generated app.
 */





/*
 * Making sure we set the CSS class for our main wrapper widget correctly.
 */
set-widget-property:cnt
  class:container





/*
 * Splitting URL, to figure out which type of request this is, and to get the
 * inclusion of our CSS file(s) correctly.
 */
split:x:/../*/url?value
  =:/
  =:?





/*
 * Checking that we have an actual [url] argument, which is not the case if this
 * app was launched as our "default app".
 */
if:x:/@split/*?count
  =:int:0

  /*
   * No [url] given, making sure we "fake" it by splitting path to file instead.
   */
  split:x:/..?name
    =:/
  set:x:/@split/0
  set:x:/@split/0/-
  add:x:/../*/split/[0,1]
    src:x:/@split/*





/*
 * Loading file containing app declaration.
 */
load-file:/modules/{0}/helpers/app-manifest.hl
  :x:/@split/0?name





/*
 * Defaulting title of page.
 */
p5.web.page.set-title:'{0}' items
  :x:/@split/0?name





/*
 * Including Micro, adding Awesome Fonts, and adding app's chosen skin.
 */
p5.web.include-css-file:@MICRO/media/main.css
p5.web.include-css-file:@MICRO/media/ext.css
p5.web.include-css-file:@MICRO/media/fonts.css
p5.web.include-css-file:@MICRO/media/skins/{0}.css
  :x:/@load-file/*/*/skin?value
p5.web.include-css-file:/modules/{0}/media/main.css
  :x:/@split/0?name





/*
 * Verifying user is allowed to view data, and if not, forcing him to login,
 * and returning early, to avoid evaluating the rest of our file.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root
  and:x:/@load-file/*/*/viewers?value
    !=:guest
  and:x:/@load-file/*/*/viewers?value
    !=:x:/whoami/*/role?value

  /*
   * Forcing user to log in, and returning early.
   */
  p5.core.login
  return





/*
 * Checking if current request is trying to download our temp CSV file, and if so,
 * returning it to the client as is.
 */
if:x:/@split/*?count
  =:int:2
  and:x:/@split/1?name
    =:download

  /*
   * Current request is trying to download the temporary created CSV file.
   *
   * Making sure we get our HTTP headers set correctly, and echoing file as is.
   */
  p5.web.header.set:Content-Type
    src:text/csv
  p5.web.header.set:Content-Disposition
    src:@"attachment; filename=""{0}.csv"""
      :x:/@split/0?name
  p5.web.echo-file:~/temp/{0}.csv
    :x:/@split/0?name

  /*
   * Returning early to abort evaluation of the rest of our file.
   */
  return





/*
 * Iterating through each field in app, adding one column for each field that is
 * supposed to be visible in the grid - But only if settings for app has told us to
 * actually show any headers at all.
 *
 * Notice, we're tracking the first textarea type of column, and making it "100%" wide, 
 * which will prioritize the first column in regards to spacing, and make all other columns
 * reduce accordingly in size, to have no more width than what's absolutely necessary
 * in order to show their values, without breaking text into multiple lines.
 */
if:x:/@load-file/*/*/show-headers?value

  /*
   * Tracking first header of type [textarea], since we want to make sure it have
   * priority in spacing, by making it 100% width, which will force it to become the 
   * largest column in our datagrid.
   */
  _first:bool:true

  /*
   * Looping through each [field] declaration in "app-manifest.hl" file for app.
   */
  for-each:x:/@load-file/*/*/field

    /*
     * Checking if field is supposed to be visible in grid.
     */
    if:x:/@_dp/#/*/show?value
      =:bool:false

      /*
       * Current field is not supposed to be visible in the datagrid.
       */
      continue

    /*
     * Checking if this is a "checked" type of field.
     */
    if:x:/@_dp/#/*/type?value
      =:checkbox

      /*
       * Yup, checkbox column type - Reducing width of column.
       *
       * This little CSS trick will make the column no wider than what it absolutely
       * needs to be, to show its header (th) cell.
       */
      add:x:/..for-each/*/add/*/*
        src
          style:"width:5px;"

    else-if:x:/@_first?value
      and:x:/@_dp/#/*/type?value
        =:textarea

      /*
       * This is our first text or textarea column, making it 100% wide, to throw
       * our CSS trick from above (read comments above).
       */
      add:x:/..for-each/*/add/*/*
        src
          style:"width:100%;"

    /*
     * Adding a column to our datagrid below.
     */
    set:x:/+2/*/*?name
      src:x:/@_dp/#/*/name?value
    eval-x:x:/+/*/*/*/*/*/innerValue
    add:x:/../*/create-widget/**/micro.widgets.grid/*/columns
      src
        foo
          class:capitalize
          widgets
            a
              href:#
              role:button
              innerValue:x:/@_dp/#/*/name?value
              onclick

                /*
                 * Forward evaluated above.
                 */
                _app-name:x:/@split/0?name

                /*
                 * Storing sort column in ViewState and re-databinding datagrid.
                 */
                get-widget-property:x:/../*/_event?value
                  innerValue
                p5.web.viewstate.set:camphora.sort-column
                  src:x:/@get-widget-property/*/*?value

                /*
                 * Making sure we update CSS class of bugger.
                 */
                p5.web.widgets.find-like
                  class:camphora-sort-column
                if:x:/-/*/*?value
                  !=:x:/../*/_event?value

                  /*
                   * User chose a different sorting column.
                   */
                  micro.css.delete:x:/@p5.web.widgets.find-like/*/*?value
                    class:camphora-sort-column camphora-sort-column-asc camphora-sort-column-desc
                  micro.css.add:x:/../*/_event?value
                    class:camphora-sort-column

                /*
                 * Checking if we should sort ascending or descending.
                 */
                get-widget-property:x:/../*/_event?value
                  class
                if:x:/@get-widget-property/*/*?value
                  ~:camphora-sort-column-asc

                  /*
                   * Grid was sorted ascendingly, toggling it to become descendingly sorted.
                   */
                  micro.css.toggle:x:/../*/_event?value
                    class:camphora-sort-column-asc camphora-sort-column-desc
                  p5.web.viewstate.set:camphora.sort-column-direction
                    src:desc

                else-if:x:/@get-widget-property/*/*?value
                  ~:camphora-sort-column-desc

                  /*
                   * Grid was sorted descendingly, toggling it to become ascendingly sorted.
                   */
                  micro.css.toggle:x:/../*/_event?value
                    class:camphora-sort-column-asc camphora-sort-column-desc
                  p5.web.viewstate.set:camphora.sort-column-direction
                    src:asc

                else

                  /*
                   * Grid was not sorted by this column at all, defaulting to ascendingly.
                   */
                  p5.web.viewstate.set:camphora.sort-column-direction
                    src:asc
                  micro.css.add:x:/../*/_event?value
                    class:camphora-sort-column-asc

                /*
                 * Re-databinding grid, now with an explicit sort order column
                 * in ViewState.
                 */
                micro.evaluate.file:/modules/{0}/helpers/databind-grid.hl
                  :x:/@_app-name?value





/*
 * Verifying user is allowed to edit data, and if not, removing edit widgets
 * from our form.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root
  and:x:/@load-file/*/*/editors?value
    !=:guest
  and:x:/@load-file/*/*/editors?value
    !=:x:/whoami/*/role?value

  /*
   * Making sure all other parts of our system knows the user is NOT allowed 
   * to edit data in the system.
   */
  p5.web.viewstate.set:camphora.editing-allowed
    src:bool:false

  /*
   * Removing the "add new record button".
   */
  set:x:/../*/create-widget/**/button/=camphora-add-new-record-button

  /*
   * Removing the "import CSV file button".
   */
  set:x:/../*/create-widget/**/button/=camphora-import-csv-file

  /*
   * Removing the "delete all button".
   */
  set:x:/../*/create-widget/**/button/=camphora-delete-all-button

  /*
   * Removing obscurer, since it's only used when files are uploaded.
   */
  set:x:/../*/create-widget/**/micro.widgets.obscurer/=camphora-upload-obscurer

else

  /*
   * Checking if current request is trying to upload a CSV file, and if so,
   * invoking file responsible for handling our upload, and returning early.
   */
  if:x:/@split/*?count
    =:int:2
    and:x:/@split/1?name
      =:upload

    /*
     * Evaluating file responsible for handling our upload, and returning early,
     * to avoid evaluation of the rest of our file.
     *
     * Making sure we wrap our invocation in a try/catch block.
     */
    try

      /*
       * Evaluating "upload" file.
       */
      eval-x:x:/+/*/app-name
      micro.evaluate.file:/modules/{0}/helpers/upload-file.hl
        :x:/@split/0?name
        app-name:x:/@split/0?name

    catch

      /*
       * Making sure we return "error" to client.
       */
      p5.web.echo:ERROR

    /*
     * Returning early to avoid evaluation of the rest of our file.
     */
    return

  /*
   * Creating Edit row header, but only if headers are supposed to be shown.
   */
  if:x:/@load-file/*/*/show-headers?value
    add:x:/../*/create-widget/**/micro.widgets.grid/*/columns
      src
        Edit
          style:"width:5px;text-align:center;"

  /*
   * Making sure all other parts of our system knows the user is allowed to edit data
   * in the system.
   */
  p5.web.viewstate.set:camphora.editing-allowed
    src:bool:true

  /*
   * Making sure we create a CSV file dropzone out of our page.
   */
  eval-x:x:/+/*/url
  micro.page.create-dropzone
    url:{0}/upload
      :x:/../*/split/[0,1]/0?name
    .onfinish:@"function(uid, no_files, no_errors) {if(no_errors > 0){alert('There were errors when trying to import your file');p5.$('camphora-upload-obscurer').el.style.display = 'none';} else {window.location.replace(window.location.href);}}"
    .onbegin:@"function() {p5.$('camphora-upload-obscurer').el.style.display = 'block';}"





/*
 * Figuring out if a query search parameter was supplied.
 */
p5.web.query.get:q
if:x:/@p5.web.query.get/*?value

  /*
   * Query parameter was given.
   */
  eval-x:x:/+/*/*/value
  add:x:/../*/create-widget/**/input/=camphora-search-query
    src
      value:x:/@p5.web.query.get/*?value
  add:x:/../*/create-widget/**/input/=camphora-search-query/*/oninit
    src
      micro.page.set-focus:x:/../*/_event?value





/*
 * Creating main wire-frame grid.
 */
eval-x:x:/+/**(/_app-name)
create-widget
  class:container
  widgets

    /*
     * Obscurer show when files are uploaded.
     */
    micro.widgets.obscurer:camphora-feed-more-obscurer
      style:"display:none;"
      message:"Please wait while we fetch more items ..."

    /*
     * Obscurer show when files are uploaded.
     */
    micro.widgets.obscurer:camphora-upload-obscurer
      style:"display:none;"
      message:"Please wait while we upload your file(s) ..."

    div
      class:row
      widgets
        div
          class:col-100
          oninit

            /*
             * Including JavaScript to determine is user is at the bottom of page,
             * at which point we "auto-feed" grid with more items.
             */
            p5.web.include-javascript:@"
window.onscroll = function() {
  if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
    if (!p5.camphora_end_of_dataset) {
      if(p5.camphora_ongoing_scroll) {
        return;
      }
      p5.camphora_ongoing_scroll = true;
      var obsc = p5.$('camphora-feed-more-obscurer').el;
      obsc.style.display = 'block';
      var el = p5.$('camphora-crud-grid');
      el.raise('.onfeed',{
        onsuccess:function() {
          p5.camphora_ongoing_scroll = false;
          obsc.style.display = 'none';
        }
      });
    }
  }
};"
          widgets
            div
              class:right
              style:"min-width:520px;"
              widgets
                div
                  class:strip
                  style:"display:inline-block;"
                  widgets
                    input:camphora-search-query
                      type:text
                      placeholder:Search ...
                      onkeydown:@"if (event.keyCode == 13) {p5.$('camphora-search-button').raise('onclick');return false;}"
                      oninit

                        /*
                         * Forward evaluated above.
                         */
                        _app-name:x:/@split/0?name

                        /*
                         * Modifying placeholder to contain record count.
                         */
                        p5.mysql.connect:[camphora]
                          p5.mysql.scalar:@"select count(*) from `{0}`"
                            :x:/@_app-name?value
                          set-widget-property:x:/../*/_event?value
                            placeholder:Search amongst {0} records ...
                              :x:/@p5.mysql.scalar?value

                    button:camphora-search-button
                      innerValue:@"<span class=""icon-search""></span>"
                      title:Search for items
                      onclick

                        /*
                         * Forward evaluated above.
                         */
                        _app-name:x:/@split/0?name

                        /*
                         * Redirecting client to make sure we pass in query
                         * parameter being the search condition.
                         */
                        get-widget-property:camphora-search-query
                          value
                        if:x:/@get-widget-property/*/*?value
                          !=:

                          /*
                           * Filter was given.
                           */
                          p5.html.url-encode:x:/@get-widget-property/*/*?value
                          p5.web.set-location:{0}?q={1}
                            :x:/@_app-name?value
                            :x:/@p5.html.url-encode?value

                        else

                          /*
                           * Filter was removed.
                           */
                          p5.web.set-location:x:/@_app-name?value

                    button:camphora-add-new-record-button
                      innerValue:@"<span class=""icon-plus""></span>"
                      style:"padding-left:35px;padding-right:35px;"
                      title:Create new record
                      onclick

                        /*
                         * Forward evaluated above.
                         */
                        _app-name:x:/@split/0?name

                        /*
                         * Making sure user is not editing another item, since this will
                         * raise an exception, due to static IDs in widgets.
                         */
                        p5.web.widgets.find
                          .edit
                        if:x:/@p5.web.widgets.find/*/*?value

                          /*
                           * Warning use that he needs to finish up editing existing item,
                           * before he can create new items.
                           */
                          micro.windows.info:You have to finish editing your item, before you can create a new item
                            class:micro-windows-info warning
                          return

                        /*
                         * Evaluating file responsible for creating a new record.
                         */
                        micro.evaluate.file:/modules/{0}/helpers/create-item.hl
                          :x:/@_app-name?value

                    button:camphora-import-csv-file
                      innerValue:@"<span class=""icon-upload""></span>"
                      title:Import a CSV file from your local disc
                      onclick:@"p5.dropzone.browse();event.stopPropagation(true);return false;"
                    button
                      innerValue:@"<span class=""icon-download""></span>"
                      title:Download items as CSV file
                      onclick

                        /*
                         * Forward evaluated above.
                         */
                        _app-name:x:/@split/0?name

                        /*
                         * Evaluating file responsible for exporting items to client.
                         */
                        eval-x:x:/+/*/app-name
                        micro.evaluate.file:/modules/{0}/helpers/export-items.hl
                          :x:/@_app-name?value
                          app-name:x:/@_app-name?value

                    button:camphora-delete-all-button
                      innerValue:@"<span class=""icon-trash""></span>"
                      title:Deletes all items in your database
                      onclick

                        /*
                         * Forward evaluated above.
                         */
                        _app-name:x:/@split/0?name

                        /*
                         * Asking user to confirm action.
                         */
                        eval-x:x:/+/*/*/*/p/*/innerValue
                        create-widgets
                          micro.widgets.modal:camphora-delete-all-records
                            widgets
                              h3
                                innerValue:Please confirm action
                              p
                                innerValue:These will delete all records in your database of type '{0}', are you sure you wish to continue?
                                  :x:/@_app-name?value
                              div
                                class:right
                                widgets
                                  div
                                    class:strip
                                    style:"display:inline-block;"
                                    widgets
                                      button
                                        innerValue:Yes
                                        style:"margin-bottom:0;"
                                        oninit

                                          /*
                                           * Setting initial focus to "Yes" button.
                                           */
                                          micro.page.set-focus:x:/../*/_event?value

                                        onclick

                                          /*
                                           * Forward evaluated above.
                                           */
                                          _app-name:x:/@split/0?name

                                          /*
                                           * Deleting all records from database.
                                           */
                                          p5.mysql.connect:[camphora]
                                            p5.mysql.delete:@"delete from {0}"
                                              :x:/@_app-name?value

                                          /*
                                           * Reloading root location for simplicity.
                                           */
                                          p5.web.set-location:/{0}
                                            :x:/@_app-name?value

                                      button
                                        innerValue:No
                                        style:"margin-bottom:0;"
                                        onclick

                                          /*
                                           * Deleting modal widget.
                                           */
                                          delete-widget:camphora-delete-all-records

                    button
                      innerValue:@"<span class=""icon-home""></span>"
                      title:Return to home
                      onclick

                        /*
                         * Redirecting user to server's root URL.
                         */
                        p5.web.get-root-location
                        p5.web.set-location:x:/-?value

    div
      class:row
      widgets
        div
          class:col-100
          widgets
            div
              class:camphora-crud-grid-wrapper
              widgets
                micro.widgets.grid:camphora-crud-grid
                  class:spaced lg-headers hover
                  .onfeed

                    /*
                     * Feeding grid with more items.
                     */
                    _app-name:x:/@split/0?name
                    micro.evaluate.file:/modules/{0}/helpers/databind-grid.hl
                      :x:/@_app-name?value
                      feed-more:bool:true

                  columns
                  oninit

                    /*
                     * Forward evaluated above.
                     */
                    _app-name:x:/@split/0?name

                    /*
                     * Evaluating file responsible for databinding grid.
                     */
                    eval-x:x:/+/*/url
                    micro.evaluate.file:/modules/{0}/helpers/databind-grid.hl
                      :x:/@_app-name?value
                      url:x:/@_app-name?value
