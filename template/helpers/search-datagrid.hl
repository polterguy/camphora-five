/*
 * This file will filter the specified __[datagrid]__ datagrid according
 * to the specified __[filter]__ argument.
 */





/*
 * Sanity checking invocation.
 */
micro.lambda.contract.min:x:/..
  datagrid:string
  filter:string
micro.lambda.contract.optional:x:/..
  page:long





/*
 * Setting focus to search button.
 */
micro.page.set-focus:camphora-search-query





/*
 * Contains all of our field definitions, which we can
 * apply to our [filter] condition to.
 */
.fields





/*
 * Resets the CSS classes of all "sort header linkbuttons".
 */
p5.web.widgets.find-like:x:/../*/datagrid?value
  class:camphora-sort-column
delete-widget-property:x:/@p5.web.widgets.find-like/*/*?value
  class





/*
 * Checking if there actually is a [filter] condition.
 */
if:x:/../*/filter?value
  !=:

  /*
   * A filter condition should be applied.
   *
   * Used as buffer to hold our [filter] argument.
   */
  .filter

  /*
   * Adding 'like' fields, if there are any such fields.
   */
  if:x:/@.fields/*/field/*/type(/=text|/=textarea)/./*/name

    /*
     * There exists "like" type of fields in app.
     * Iterating through them all and adding them to our [.filter].
     */
    for-each:x:/@.fields/*/field/*/type(/=text|/=textarea)/./*/name?value

      /*
       * Checking if this is the first filter condition, and if not,
       * making sure we add an 'or' clause before we add our currently
       * iterated filter.
       */
      if:x:/@.filter?value
        set:x:/@.filter?value
          src:"{0} or "
            :x:/@.filter?value

      /*
       * Concatenating currently iterated filter into [.filter].
       */
      set:x:/@.filter?value
        src:{0}`{1}` like @like
          :x:/@.filter?value
          :x:/@_dp?value

    /*
     * Adding [@filter] argument to databind invocation.
     */
    eval-x:x:/+/*/*
    add:x:/@.filter
      src
        @like:%{0}%
          :x:/../*/filter?value

  /*
   * Adding 'equal' fields, if there are any such fields.
   */
  if:x:/@.fields/*/field/*/type(/=number|/=select|/=radio)/./*/name

    /*
     * There exists "equal" type of fields in app.
     * Iterating through them all and adding them to our [.filter].
     */
    for-each:x:/@.fields/*/field/*/type(/=number|/=select|/=radio)/./*/name

      /*
       * If this is a "number" type of field, and the actual query cannot be converted
       * into a number, we simply ignore it.
       */
      if:x:/@_dp/#/./*/type/=number
        and
          p5.types.can-convert:x:/../*/filter?value
            type:double
          not

        /*
         * Value could not successfully be converted into a number, hence
         * we simply ignore it for this number field.
         */
        continue

      /*
       * Checking if this is the first filter condition, and if not,
       * making sure we add an 'or' clause before we add our currently
       * iterated filter.
       */
      if:x:/@.filter?value
        set:x:/@.filter?value
          src:"{0} or "
            :x:/@.filter?value

      /*
       * Concatenating currently iterated filter into [.filter].
       */
      set:x:/@.filter?value
        src:{0}`{1}` = @equals
          :x:/@.filter?value
          :x:/@_dp/#?value

    /*
     * Adding [@value] argument to databind invocation.
     */
    eval-x:x:/+/*/*
    add:x:/@.filter
      src
        @equals:x:/../*/filter?value

  /*
   * Adding 'checkbox' fields, if there are any such fields, and the given filter
   * matches the name of the checkbox field.
   */
  if:x:/@.fields/*/field/*/type/=checkbox/./*/name/={0}
    :x:/../*/filter?value

    /*
     * Checking if this is the first filter condition, and if not,
     * making sure we add an 'or' clause before we add our currently
     * iterated filter.
     */
    if:x:/@.filter?value
      set:x:/@.filter?value
        src:"{0} or "
          :x:/@.filter?value

    /*
     * Concatenating currently iterated filter into [.filter].
     */
    set:x:/@.filter?value
      src:{0}`{1}` = 1
        :x:/@.filter?value
        :x:/../*/filter?value

  /*
   * Adding entire [.filter] argument to databind invocation,
   * including its children nodes, which might include [@value]
   * and [@filter].
   */
  eval-x:x:/+2/*/*
  add:x:/+/*/*
    src:x:/@.filter/*
  add:x:/../*/camphora.{0}.datagrid.databind
    :{app-name}
    src
      filter:x:/@.filter?value

else

  /*
   * No filter condition, making sure we reset it in databind invocation.
   */
  add:x:/../*/camphora.{0}.datagrid.databind
    :{app-name}
    src:filter





/*
 * Checking if caller provided an initial [page] value.
 */
if:x:/../*/page?value

  /*
   * Initial [page] argument supplied.
   */
  add:x:/../*/camphora.{0}.datagrid.databind
    :{app-name}
    src:x:/../*/page

else

  /*
   * No initial [page] argument supplied,making sure we set it to 0
   * during invocation to databind.
   */
  add:x:/../*/camphora.{0}.datagrid.databind
    :{app-name}
    src:page





/*
 * Re-databinding datagrid, and making sure we reset all arguments,
 * except possibly the [filter] argument.
 */
camphora.datagrid.databind:x:/../*/datagrid?value
  order-by
  order-dir





/*
 * Making sure we signal that the current filter has been
 * set to nothing.
 */
eval-x:x:/+/*
camphora.filter-changed:x:/../*/datagrid?value
  filter:x:/../*/filter?value
