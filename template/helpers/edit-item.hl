/*
 * This is a _"template file"_, implying this file will be copied into
 * your Camphora Five generated app's folder when your app is generated,
 * and possibly modified to reflect your app's name/structure.
 *
 * File responsible for editing existing Camphora Five CRUD records.
 *
 * Expects a __[parent]__, being the ID of the widget where the editing widget should
 * be injected - In addition to __[id]__ being the record's database ID.
 *
 * Optionally pass in __[edit-items]__ to indicate whether or not it is possible
 * to edit and delete items in the datagrid, which is needed to add one addition
 * colspan to the editor widget.
 */





/*
 * Sanity checking argument.
 */
micro.lambda.contract.min:x:/..
  row-widget-id:string
  id:long
  datagrid:string
  delete:bool





/*
 * How many visible columns we have in our table in total.
 */
.column-count





/*
 * Checking if deletion of items is allowed, at which point we'll have to modify the
 * colspan of our edit row widget.
 */
if:x:/../*/delete?value
  =:bool:true

  /*
   * We need to increment the [.column-count] by 1, to accommodate
   * for the "delete item" row.
   */
  set:x:/@.column-count?value
    +:x:/@.column-count?value
      _:1





/*
 * Toggling editing row CSS class on row caller wants to edit.
 */
micro.css.toggle:x:/../*/row-widget-id?value
  class:camphora-row-is-edited





/*
 * Checking if item is already being edited.
 */
p5.web.widgets.get-parent:x:/../*/row-widget-id?value
p5.web.widgets.find-first:x:/@p5.web.widgets.get-parent/*/*?value
  .edit:x:/../*/id?value
if:x:/-/*/*?value

  /*
   * Editor for item is already open, hence we close it,
   * to allow for "toggling" functionality on editors.
   */
  delete-widget:x:/@p5.web.widgets.find-first/*/*?value
  return





/*
 * Checking if another item is already being edited, at which point
 * we delete its editor.
 */
p5.web.widgets.find-first:x:/@p5.web.widgets.get-parent/*/*?value
  .edit
if:x:/-/*/*?value

  /*
   * Editor for another item is already open, hence we close it,
   * before we initiate editing of the current item.
   *
   * But first we must find its datagrid row, and delete the
   * "camphora-row-is-edited" CSS class on it.
   */
  p5.web.widgets.get-children:x:/@p5.web.widgets.get-parent/*/*?value
  micro.css.delete:x:/-/*/*/={0}/-?value
    :x:/@p5.web.widgets.find-first/*/*?value
    class:camphora-row-is-edited
  delete-widget:x:/@p5.web.widgets.find-first/*/*?value





/*
 * Selecting item from database.
 */
p5.mysql.connect:[camphora]

  /*
   * Selecting record from database.
   */
  p5.mysql.select:@"select * from `{0}` where id = @id"
    :{app-name}
    @id:x:/../*/id?value

  /*
   * Applying values to [create-widget] invocation below.
   */
  for-each:x:/@p5.mysql.select/*/*
    set:x:/../*/create-widget/**/={{0}}?value
      :x:/@_dp/#?name
      src:x:/@_dp/#?value





/*
 * Including "CR/LF" JavaScript to make sure we click "Save" button,
 * when user press the Return key in a textbox widget, and that we close editor
 * when user presses Esc key in a textbox.
 */
p5.web.include-javascript:@"function p5_camphora_edit_item_onkeydown(e) {
  if (e.keyCode == 13) {
    var el = event.target;
    while ((el = el.parentElement) && !el.classList.contains('camphora-edit-row'));
    p5.$(el.getElementsByClassName('large')[0]).raise('onclick');
    return false;
  } else if (e.keyCode == 27) {
    var el = event.target;
    while ((el = el.parentElement) && !el.classList.contains('camphora-edit-row'));
    p5.$(el).raise('.onclose');
    return false;
  }
}"





/*
 * Creating editing widget for record.
 */
eval-x:x:/+/**(/.editor-row|/.datagrid|/.id)
create-widget
  after:x:/../*/row-widget-id?value
  element:tr
  .edit:x:/../*/id?value
  class:camphora-edit-row
  events


    /*
     * Returns the database ID of the currently edited item.
     *
     * Expects [_arg] being the widget id of the datagrid you want to
     * retrieve the currently edited item's ID from.
     */
    camphora.datagrid.edited-item-id

      /*
       * Forward evaluated above.
       */
      .id:x:/../*/id?value
      .datagrid:x:/../*/datagrid?value

      /*
       * Checking that this is the grid caller is referencing.
       */
      if:x:/../*/_arg?value
        !=:x:/@.datagrid?value
        return

      /*
       * Sanity checking invocation.
       */
      micro.lambda.contract.min:x:/..
        _arg:string

      /*
       * Retrieving database ID of edited item, and returning it to caller.
       */
      get-widget-property:x:/../*/_event?value
        .edit
      eval-x:x:/+/*
      return
        id:x:/@get-widget-property/*/*?value.long

  .onclose

    /*
     * Contains the ID of our editor row.
     */
    .editor-row:x:/../*/row-widget-id?value
    micro.css.toggle:x:/-?value
      class:camphora-row-is-edited

    /*
     * Deleting editor widget.
     */
    delete-widget:x:/../*/_event?value

  widgets
    td
      colspan:x:/@.column-count?value
      widgets
        div
          class:shaded rounded air-inner air-top air-bottom bg
          widgets
            div
              widgets:data
            div
              class:right strip
              widgets
                button
                  innerValue:@"<span class=""icon-floppy-disk""></span>"
                  title:Saves your data and closes editor
                  class:large camphora-save-button
                  onclick

                    /*
                     * Contains the ID of our editor row.
                     */
                    .editor-row:x:/../*/row-widget-id?value
                    micro.css.toggle:x:/-?value
                      class:camphora-row-is-edited

                    /*
                     * Finding main editor widget for item, and serializing its
                     * form widgets.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .edit
                    micro.form.serialize:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                    /*
                     * Updating item in database.
                     */
                    .datagrid:x:/../*/datagrid?value
                    add:x:/+
                      src:x:/@micro.form.serialize/*
                    camphora.database.update:x:/@.datagrid?value

                    /*
                     * Re-databinding datagrid.
                     */
                    camphora.datagrid.databind:x:/@.datagrid?value

                    /*
                     * Giving some info to user.
                     */
                    micro.windows.info:Record was successfully saved
                      class:micro-windows-info success
