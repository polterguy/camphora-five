
/*
 * File responsible for databinding the grid for a Camphora Five generated app.
 *
 * Optionally requires [filter] or [.id], at which the latter case, only the 
 * specified database [id] item will be re-databound.
 */





/*
 * Signal node, to separate arguments from the rest of our lambda.
 */
.signal





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.optional:x:/..
  filter:string
  offset:long
  id:long





/*
 * Default values, used if no arguments are given.
 */
.defaults
  offset:long:0





/*
 * Figuring out path of app's "/helpers/" folder.
 */
split:x:/..?name
  =:/
set:x:/@split/0/-
join:x:/@split/*?name
  sep:/





/*
 * Loading app declaration file.
 */
load-file:/{0}/app.hl
  :x:/@join?value





/*
 * Splitting URL, to figure out which type of request this is.
 *
 * Candidates are "/tag" request for instance.
 */
split:x:/../*/url?value
  =:/





/*
 * Creating our SQL fields definition, by figuring out which columns are supposed to be visible in
 * the datagrid.
 */
_cols
for-each:x:/@load-file/*/*/field

  /*
   * Checking if field is supposed to be visible in grid.
   */
  if:x:/@_dp/#/*/show?value

    /*
     * Adding column to SQL.
     */
    set:x:/@_cols?value
      src:{0},{1}
        :x:/@_cols?value
        :x:/@_dp/#/*/name?value





/*
 * Creating our SQL "where" statement, according to [filter] and "tag" requested.
 */
_where
_tag
for-each:x:/@load-file/*/*/field

  /*
   * Checking if we have a [tag] condition.
   */
  if:x:/@split/*?count
    >:int:2
    and:x:/@split/1?name
      =:tag

    /*
     * User requested items having a #hash-tag, now checking if currently iterated
     * field is a [textarea] type of field, and if so, we add it as a criteria.
     */
    if:x:/@_dp/#/*/type?value
      =:textarea

      /*
       * Currently iterated [field] is a [textarea] field, and user requested a 
       * specific #hash-tag - Making sure we add our #hash-tag condition.
       */
      set:x:/@_tag?value
        src:"{0} regexp @tag"
          :x:/@_dp/#/*/name?value
      eval-x:x:/+/*/*
      add:x:/../*/p5.mysql.connect/*/p5.mysql.select
        src
          @tag:x:/@split/2?name

  /*
   * Checking if we have a [filter] condition.
   */
  if:x:/../*/filter?value

    /*
     * Filter was given, making sure we create our "where" condition.
     */
    if:x:/@_where?value

      /*
       * Adding "and" parts to SQL.
       */
      set:x:/@_where?value
        src:"{0} or "
          :x:/@_where?value

    else

      /*
       * Adding first parts of our "where" clause.
       */
      set:x:/@_where?value
        src:" where ("

      /*
       * Making sure we pass in [@filter] to [p5.mysql.select]
       */
      add:x:/../*/p5.mysql.connect/*/p5.mysql.select
        src
          @filter:"%{0}%"
            :x:/../*/filter?value

    /*
     * Adding up "where" for currently iterated column.
     */
    set:x:/@_where?value
      src:@"{0} like @filter"
        :x:/@_dp/#/*/name?value





/*
 * Adding closing ")" to where clause.
 */
if:x:/@_where?value
  set:x:/@_where?value
    src:"{0})"
      :x:/@_where?value





/*
 * Checking if user requested a tag, and massaging "where" parts accordingly.
 */
if:x:/@_tag?value
  if:x:/@_where?value
    set:x:/@_tag?value
      src:" and {0}"
        :x:/@_tag?value
  else
    set:x:/@_tag?value
      src:" where {0}"
        :x:/@_tag?value





/*
 * Trimming away redundant "," on columns declaration.
 */
set:x:/@_cols?value
  trim:x:/@_cols?value
    chars:,





/*
 * Checking if caller supplied an [id] argument.
 */
if:x:/@.signal/--/id?value

  /*
   * [id] argument was supplied, modifying where clause to accommodate for 
   * only specified id.
   */
  if:x:/@_where?value

    /*
     * Adding "id" clause as AND parameter to SQL.
     */
    set:x:/@_where?value
      src:@"{0} and id = @id"
        :x:/@_where?value

  else

    /*
     * Adding "id" clause as main where parts to SQL.
     */
    set:x:/@_where?value
      src:@" where id = @id"

  /*
   * Adding [@id] parameter to SQL.
   */
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @id:x:/../*/id?value





/*
 * Opening database connection, and executing our SQL query.
 */
p5.mysql.connect:[camphora]
  p5.mysql.select:@"select id, {0} from {1}{2}{3} order by id limit 10 offset @offset"
    :x:/@_cols?value
    :x:/../*/split/[0,1]/0/-2?name
    :x:/@_where?value
    :x:/@_tag?value
    @offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value

  /*
   * Looping through above results, and creating a row in grid for each row in database.
   */
  eval-x:x:/+/**/_table-name
  for-each:x:/@p5.mysql.select/*

    /*
     * First adding [item] to databind invocation.
     */
    add:x:/../*/micro.widgets.grid.databind
      src:item

    /*
     * Then looping through each cell, making sure we HTML encode it before we
     * append it's value into currently iterated [item].
     */
    for-each:x:/@_dp/#/*(!/id)

      /*
       * Special handling of "checkbox" type of items, to create some candy.
       */
      if:x:/@load-file/*/*/field/*/name/={0}/./*/type?value
        :x:/@_dp/#?name
        =:checkbox

        /*
         * Checkbox type of item.
         */
        if:x:/@_dp/#?value.int
          =:int:1

          /*
           * Item is checked.
           */
          set:x:/+/*/*?name
            src:x:/@_dp/#?name
          add:x:/../*/micro.widgets.grid.databind/0/-
            src
              foo:@"<span class=""icon-check""></span>"
                style:"text-align:right;width:5px;font-size:1.5rem;"

        else

          /*
           * Item is NOT checked.
           */
          set:x:/+/*/*?name
            src:x:/@_dp/#?name
          add:x:/../*/micro.widgets.grid.databind/0/-
            src
              foo:""
                style:"width:5px;"

      else-if:x:/@load-file/*/*/field/*/name/={0}/./*/type?value
        :x:/@_dp/#?name
        =:textarea

        /*
         * Textarea's content is turned into Markdown using intelligent parsing.
         */
        camphora._internal.html.markdown2html:x:/@_dp/#?value

        /*
         * Adding item to grid's databind invocation.
         */
        eval-x:x:/+2/*/**
        set:x:/+/*/*?name
          src:x:/@_dp/#?name
        add:x:/../*/micro.widgets.grid.databind/0/-
          src
            foo:x:/@camphora._internal.html.markdown2html?value
              .data-field:x:/@_dp/#?name

      else-if:x:/@load-file/*/*/field/*/name/={0}/./*/type?value
        :x:/@_dp/#?name
        =:text
        or:x:/@load-file/*/*/field/*/name/={0}/./*/type?value
          :x:/@_dp/#?name
          =:radio
        or:x:/@load-file/*/*/field/*/name/={0}/./*/type?value
          :x:/@_dp/#?name
          =:select

        /*
         * Text widgets, select widget, and radio widgets are rendered as "nowrap", 
         * in addition to that their values are HTML encoded, to avoid HTML injection in items.
         */
        p5.html.html-encode:x:/@_dp/#?value

        /*
         * Adding item to grid's databind invocation.
         */
        eval-x:x:/+2/*/**
        set:x:/+/*/*?name
          src:x:/@_dp/#?name
        add:x:/../*/micro.widgets.grid.databind/0/-
          src
            foo:x:/@p5.html.html-encode?value
              .data-field:x:/@_dp/#?name
              style:"white-space:nowrap;"

    /*
     * Adding "delete button" to grid, in addition to meta info for row, and [onclick]
     * event, to handle editing.
     */
    eval-x:x:/+/*/*/*/.id
    add:x:/../*/micro.widgets.grid.databind/0/-
      src
        .row
          .id:x:/@_dp/#/*/id?value

        Edit
          style:"vertical-align:bottom;"
          widgets
            button
              innerValue:@"<span class=""icon-pencil""></span>"
              style:"margin-bottom:0;padding-left:25px;padding-right:25px;"
              onclick

                /*
                 * Figuring our row's database ID.
                 */
                p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                  .id
                get-widget-property:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                  .id

                /*
                 * Checking to see if some other row is already being edited, at which point we
                 * simply abort evaluation of the rest of lambda.
                 */
                p5.web.widgets.find
                  .edit
                if:x:/-/*/*?value

                  /*
                   * Another item is already being edited, not need to continue.
                   */
                  micro.windows.info:Please finish editing your items, before attempting to edit another item
                    class:micro-windows-info warning
                  return

                /*
                 * Figuring out number of child widgets in row, such that we can create
                 * our "colspan" attribute correctly for our "edit row widget".
                 */
                p5.web.widgets.get-children:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                /*
                 * Creating our "edit record widget", just beneath the currentl clicked row.
                 */
                eval-x:x:/+/**/id
                create-widget
                  element:tr
                  after:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                  .edit:x:/@get-widget-property/*/*?value
                  widgets
                    container
                      element:td
                      colspan:x:/@p5.web.widgets.get-children/*/*?count
                      class:camphora-edit-row bg
                      oninit

                        /*
                         * Evaluating file responsible for creating our actual "edit widget", passing
                         * inn ID of current widget as [parent].
                         */
                        _table-name:x:/../*/split/[0,1]/0/-2?name
                        eval-x:x:/+/*
                        micro.evaluate.file:/modules/{0}/helpers/edit-item.hl
                          :x:/@_table-name?value
                          parent:x:/../*/_event?value
                          id:x:/@get-widget-property/*/*?value

        Delete
          style:"vertical-align:bottom;"
          widgets
            button
              innerValue:@"<span class=""icon-trash""></span>"
              style:"margin-bottom:0;padding-left:25px;padding-right:25px;"
              onclick

                /*
                 * Deleting row.
                 */
                _table-name:x:/../*/split/[0,1]/0/-2?name
                p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                  .id
                get-widget-property:x:/-/*/*?value
                  .id
                p5.mysql.connect:[camphora]
                  p5.mysql.delete:@"delete from {0} where id = @id"
                    :x:/@_table-name?value
                    @id:x:/@get-widget-property/*/*?value

                /*
                 * Deleting row wrapping record.
                 */
                delete-widget:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                /*
                 * Checking if item is currently being edited, and if so, making sure
                 * we delete its "edit widget".
                 */
                p5.web.widgets.find
                  .edit:x:/@get-widget-property/*/*?value
                if:x:/@p5.web.widgets.find/*/*?value

                  /*
                   * Item is being edited, making sure we delete its edit widget.
                   */
                  delete-widget:x:/@p5.web.widgets.find/*/*?value

                /*
                 * Giving user visual feedback.
                 */
                micro.windows.info:Record was deleted
                  class:micro-windows-info success





/*
 * Checking if this is a "replace" operation, at which point an [id] argument
 * was specified.
 */
if:x:/../*/id?value

  /*
   * Making sure our item replaces existing grid item, instead of appending.
   */
  p5.web.widgets.find
    .id:x:/../*/id?value
  add:x:/../*/micro.widgets.grid.databind
    src
      keep-items:bool:true
  eval-x:x:/+/*/*
  add:x:/../*/micro.widgets.grid.databind/*/*/.row
    src
      .replace:x:/@p5.web.widgets.find/*/*?value





/*
 * Databinding grid.
 */
micro.widgets.grid.databind:camphora-crud-grid
