/*
 * This file will insert a database item,
 * with all given arguments, which should be database columns.
 */





/*
 * Separating arguments from the rest of our lambda.
 */
.signal





/*
 * Sanity checking invocation.
 */
micro.lambda.contract.optional:x:/..
  filter
  page
  order-by
  order-dir





/*
 * Setting properties, if given.
 */
for-each:x:/@.signal/--(/filter|/page|/order-by|/order-dir)

  /*
   * Changing name of [foo] node below to property event name.
   */
  set:x:/..for-each/*/foo?name
    src:camphora.datagrid.{0}
      :x:/@_dp/#?name

  /*
   * The below [foo] node is actually our property setter invocation,
   * but its name is changed above, before we invoke it.
   *
   * Before we can invoke it though, we'll need to apply its arguments.
   */
  add:x:/+2/*
    src:x:/@_dp/#/*
  eval-x:x:/+/*
  foo
    value:x:/@_dp/#?value





/*
 * Retrieving properties from persistent property events.
 */
.properties
  camphora.datagrid.filter
  camphora.datagrid.page
  camphora.datagrid.order-by
  camphora.datagrid.order-dir
for-each:x:/@.properties/*?name

  /*
   * Invoking property getter event, making sure we set its correct
   * name before we do.
   */
  set:x:/..for-each/*/foo?name
    src:x:/@_dp?value
  foo
  add:x:/../*/micro.widgets.mysql.datagrid.databind
    src:x:/./-/*





/*
 * Databinding MySQL datagrid.
 */
micro.widgets.mysql.datagrid.databind:camphora-datagrid





/*
 * Making sure we signal to any listeners that datagrid has been databound.
 */
camphora.datagrid.page
eval-x:x:/+/*
camphora.datagrid.databound
  page:x:/@camphora.datagrid.page/*?value.long
  more-pages:x:/@micro.widgets.mysql.datagrid.databind/*/more-pages?value
