/*
 * This file is invoked when the user selects a view in his navbar
 * in the _"default.hl"_ view for his app. This file will attempt
 * to dynamically load the view, and _"inject"_ it into a view container
 * dynamically.
 *
 * This file expects a __[view]__ argument, being the path to the view the
 * user selected - In addition to optionally an __[id]__ argument, being the
 * database ID of the item the user is currently editing.
 *
 * __Notice__, not all views can be dynamically loaded up like this, and
 * whether or not this is possible, depends upon how the view is wired
 * together. This file will only attempt to dynamically load the view if
 * it contains a __[create-widget]__ invocation, or a
 * __[create-container-widget]__ invocation at the root level of the
 * lambda object in the Hyperlambda file for the view.
 *
 * Also notice that some views are dependent upon the database __[id]__
 * to function adequately.
 *
 * If the view cannot be dynamically loaded according to the above description,
 * this file will fallback to redirecting the user to the views URL, passing
 * in the __[id]__ as the last entity of the URL, if any __[id]__ argument is
 * passed in by caller.
 */





/*
 * Sanity checking invocation.
 */
micro.lambda.contract.min:x:/..
  view:string
micro.lambda.contract.optional:x:/..
  id:long





/*
 * Loading view.
 */
load-file:x:/../*/view?value





/*
 * This view is not creating widgets, hence we redirect the client
 * to its URL, passing in any [id] argument if it is given.
 */
split:x:/../*/view?value
  =:/
  =:.

/*
 * Removing "/modules/", "/views/" and ".hl" parts of
 * [view], leaving us with "/app-name/view-name/" parts,
 * becoming the view's main URL.
 */
set:x:/@split(/0/-|/0|/2)

/*
 * Checking if we have an [id].
 */
if:x:/../*/id?value

  /*
   * Passing in [id] of currently edited view as the last URL entity.
   */
  add:x:/@split
    src:x:/../*/id?value

/*
 * Joining all URL entities now, ending up with something like
 * the following "/app-name/view-name/xxx/" where xxx is the database
 * id.
 */
join:x:/@split/*?name
  sep:/





/*
 * Verifying that this actually is a visual view, which we
 * determine by figuring out whether or not view is creating
 * widgets or not.
 */
if:x:/@load-file/*/*(/create-widget|/create-container-widget)
  not

  /*
   * Redirecting client to location of view.
   */
  p5.web.set-location:/{0}
    :x:/@join?value

  /*
   * Returning warly to avoid evaluation of the rest of our lambda.
   */
  return





/*
 * Checking if there exists a view container already, at which
 * point we delete it.
 */
if
  fetch:x:/0/0?value
    widget-exists:camphora-view-container
  =:bool:true

  /*
   * Deleting previously shown view.
   */
  delete-widget:camphora-view-container





/*
 * Checking if this view is a [create-widget] or [create-container-widget]
 * type of view, at which point we make sure we "inject" the view into our
 * custom "view container".
 */
if:x:/@load-file/*/*(/create-widget|/create-container-widget)

  /*
   * Making sure we create our "view container", for then to
   * modify our view, such that it is injected into this container.
   */
  eval-x:x:/+/**/.view-url
  create-container-widget:camphora-view-container
    after:camphora-navbar
    class:row
    widgets
      div
        class:col-100
        widgets
          div
            class:air-inner rounded shaded
            widgets
              div
                class:strip right camphora-view-toolbar
                widgets
                  button
                    innerValue:@"<span class=""icon-share""></span>"
                    title:Open view in another window
                    onclick

                      /*
                       * Forward evaluated above.
                       */
                      .view-url:/{0}
                        :x:/@join?value
                      p5.web.send-javascript:@"window.open('{0}', '_blank');"
                        :x:/@.view-url?value

                  button
                    innerValue:@"<span class=""icon-cross""></span>"
                    title:Close view viewer
                    onclick

                      /*
                       * Deleting view.
                       */
                      delete-widget:camphora-view-container

              /*
               * This is the widget where we actually inject our view.
               *
               * Notice the top margin, which makes sure the actual view doesn't
               * "crash" with the "close view" button or the "open view's URL" button.
               */
              container:camphora-view-wrapper
                style:"margin-top: 2rem;"

  /*
   * Adding [parent] argument to our first [create-widget] or
   * [create-container-widget] invocation, such that we can inject it
   * into our view container.
   */
  add:x:/@load-file/*/*(/create-widget|/create-container-widget)/[0,1]
    src
      parent:camphora-view-wrapper





/*
 * Evaluating view, now possibly modified such that it is loaded
 * up into our "view container".
 *
 * Making sure we do this in an exception handler, in case loading
 * of view is not successful for some reasons.
 *
 * If an exception occurs, we delete the view container created above,
 * and displays an information "bubble window" to the user.
 */
try

  /*
   * Passing in [id] specified by caller.
   */
  add:x:/+
    src:x:/../*/id
  eval:x:/@load-file/*

catch

  /*
   * Oops, somethign went wrong.
   */
  micro.windows.info:x:/@message?value
    class:micro-windows-info warning
  delete-widget:camphora-view-container
