/*
 * File responsible for creating and returning widgets necessary to edit/create a new item.
 *
 * Optionally pass in data matching type declaration of widgets.
 */





/*
 * Signal node to separate arguments from the rest of our lambda.
 */
.signal





/*
 * Figuring out path of app's "/helpers/" folder.
 */
split:x:/..?name
  =:/
set:x:/@split/0/-
join:x:/@split/*?name
  sep:/





/*
 * Loading app declaration file.
 */
load-file:/{0}/app-manifest.hl
  :x:/@join?value





/*
 * Figuring out which data to ask user by, by creating an associated widget for
 * each [field] in "app-manifest.hl" file.
 *
 * Notice, we do some "expression magic" here, to make sure all textbox fields are
 * added first, then textarea fields, then select fields, then radio field, before 
 * finally all other types of fields (only checkbox type left at that point though).
 */
_first:bool:true
for-each:x:/@load-file/*/*/field

  /*
   * Figuring out type of field, and creating an associated widget accordingly.
   */
  switch:x:/@_dp/#/*/type?value

    /*
     * Single line textbox type of data.
     */
    case:text
    case:number

      /*
       * Checking if this is our first iteration.
       */
      if:x:/@_first?value
        add:x:/..case/*/add/*/*/*/*/input
          src
            oninit
              micro.page.set-focus:x:/../*/_event?value
        set:x:/@_first?value
          src:bool:false

      /*
       * Checking if value argument was supplied.
       */
      if:x:/@.signal/--/{0}?value
        :x:/@_dp/#/*/name?value

        /*
         * Value for widget was provided.
         */
        eval-x:x:/+/*/*
        add:x:/..case/*/add/*/*/*/*/input
          src
            value:x:/@.signal/--/{0}?value
              :x:/@_dp/#/*/name?value

      /*
       * Checking if this is a "number" type of field.
       */
      if:x:/@_dp/#/*/type?value
        =:number
        add:x:/..case/*/add/*/*/*/*/input
          src
            type:number
      else
        add:x:/..case/*/add/*/*/*/*/input
          src
            type:text
            maxlength:256

      /*
       * Adding widget to modal window.
       */
      eval-x:x:/+/*/*/*/*(/input|/*(/for|/innerValue|/placeholder|/.data-field))
      add:x:/../*/return
        src
          div
            class:strip fill
            widgets
              label
                for:{0}-widget
                  :x:/@_dp/#/*/name?value
                innerValue:x:/@_dp/#/*/name?value
                class:capitalize
              input:{0}-widget
                :x:/@_dp/#/*/name?value
                placeholder:{0} ...
                  :x:/@_dp/#/*/name?value
                .data-field:x:/@_dp/#/*/name?value
                onkeydown:@"if (event.keyCode == 13) {p5.$('camphora-save-record-button').raise('onclick');return false;}"

    /*
     * Timestamp for when record was created.
     */
    case:created

      /*
       * Adding widget to modal window, but only if a value for it was actually provided.
       *
       * This logic is here since this file is used for both creating new items, and for
       * editing existing items.
       * If an item is created, there are no reasons we should display its "created timestamp",
       * since this value is created only during insertion of an item into our database, and
       * also not supposed to be possible to modify in any ways.
       */
      if:x:/@.signal/--/{0}?value
        :x:/@_dp/#/*/name?value

        /*
         * A value was provided for our "created" timestamp.
         */
        p5.types.date.format:x:/@.signal/--/{0}?value
          :x:/@_dp/#/*/name?value
          format:"ddd d. MMM yyyy - HH:mm"
        eval-x:x:/+/*/*/*
        add:x:/../*/return
          src
            p
              class:camphora-date-edit-item
              innerValue:"Created - {0}"
                :x:/@p5.types.date.format?value

    /*
     * Multi line textbox type of data.
     */
    case:textarea

      /*
       * Checking if this is our first iteration.
       */
      if:x:/@_first?value
        add:x:/..case/*/add/*/*
          src
            oninit
              micro.page.set-focus:x:/../*/_event?value
        set:x:/@_first?value
          src:bool:false

      /*
       * Checking if value argument was supplied.
       */
      if:x:/@.signal/--/{0}?value
        :x:/@_dp/#/*/name?value

        /*
         * Value for widget was provided.
         */
        eval-x:x:/+/*/*
        add:x:/..case/*/add/*/*/literal
          src
            innerValue:x:/@.signal/--/{0}?value
              :x:/@_dp/#/*/name?value

      /*
       * Adding widget to modal window.
       */
      eval-x:x:/+/*/*/*(/placeholder|/.data-field|/innerValue)
      add:x:/../*/return
        src
          label
            innerValue:x:/@_dp/#/*/name?value
            class:capitalize above
          literal
            element:textarea
            class:fill
            rows:7
            placeholder:{0} ...
              :x:/@_dp/#/*/name?value
            .data-field:x:/@_dp/#/*/name?value

    /*
     * Select type of data.
     */
    case:select

      /*
       * Adding each option for select field.
       */
      for-each:x:/@_dp/#/*/type/*

        /*
         * Checking if value argument was supplied.
         */
        if:x:/@.signal/--/{0}?value
          :x:/..for-each/@_dp/#/*/name?value
          and:x:/@_dp/#?name
            =:x:/@.signal/--/{0}?value
              :x:/..for-each/@_dp/#/*/name?value
          add:x:/..for-each/*/add/*/*
            src:selected

        /*
         * Adding option element to select dropdown list.
         */
        eval-x:x:/+/*/*/*/innerValue
        add:x:/..case/*/add/*/*/*/widgets/*/select/*/widgets
          src
            option
              innerValue:x:/@_dp/#?name

      /*
       * Now adding option element to modal widget.
       */
      eval-x:x:/+/*/*/*/*(/select|/*(/for|/innerValue|/.data-field))
      add:x:/../*/return
        src
          div
            class:strip fill
            widgets
              label
                for:{0}-widget
                  :x:/@_dp/#/*/name?value
                innerValue:x:/@_dp/#/*/name?value
                class:capitalize
              select:{0}-widget
                :x:/@_dp/#/*/name?value
                class:fill
                .data-field:x:/@_dp/#/*/name?value
                widgets

    /*
     * Checkbox type of data.
     */
    case:checkbox

      /*
       * Checking if value argument was supplied, and it was checked.
       */
      if:x:/@.signal/--/{0}?value
        :x:/@_dp/#/*/name?value
        =:int:1

        /*
         * Value for widget was provided.
         */
        add:x:/..case/*/add/**/input
          src:checked

      /*
       * Adding widget to modal window.
       */
      eval-x:x:/+/**(/innerValue|/.data-field)
      add:x:/../*/return
        src
          div
            widgets
              label
                class:capitalize
                widgets
                  span
                    innerValue:x:/@_dp/#/*/name?value
                  input
                    type:checkbox
                    .data-field:x:/@_dp/#/*/name?value

    /*
     * Radiobutton type of data.
     */
    case:radio

      /*
       * Adding each option for radiobutton field.
       */
      _first:bool:true
      for-each:x:/@_dp/#/*/type/*

        /*
         * Checking if value argument was supplied.
         */
        if:x:/@.signal/--/{0}?value
          :x:/..for-each/@_dp/#/*/name?value
          and:x:/@_dp/#?name
            =:x:/@.signal/--/{0}?value
              :x:/..for-each/@_dp/#/*/name?value
          add:x:/..for-each/*/add/**/input
            src:checked

        /*
         * Making sure first radiobutton becomes checked by default, unless a
         * value for group was supplied by caller.
         */
        if:x:/@_first?value
          and:x:/@.signal/--/{0}?value
            :x:/..for-each/@_dp/#/*/name?value
            not
          add:x:/..for-each/*/add/*/*/input
            src:checked
          set:x:/@_first?value
            src:bool:false

        /*
         * Adding radio button to modal widget.
         */
        eval-x:x:/+/**(/innerValue|/name|/.data-value)
        add:x:/..case/*/add/*/*/*/widgets
          src
            label
              class:capitalize
              widgets
                span
                  innerValue:x:/@_dp/#?name
                input
                  type:radio
                  name:x:/@for-each/@_dp/#/*/name?value
                  .data-value:x:/@_dp/#?name

      /*
       * Now adding radiobutton group widget to modal widget.
       */
      add:x:/../*/return
        src
          div
            widgets





/*
 * Returning items to caller.
 */
return
