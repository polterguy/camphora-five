
/*
 * File responsible for creating and returning widgets necessary to edit/create a new item.
 *
 * Optionally pass in data matching type declaration of widgets.
 */





/*
 * Signal node to separate arguments from the rest of our lambda.
 */
.signal





/*
 * Figuring out path of app's "/helpers/" folder.
 */
split:x:/..?name
  =:/
set:x:/@split/0/-
join:x:/@split/*?name
  sep:/





/*
 * Loading app declaration file.
 */
load-file:/{0}/app.hl
  :x:/@join?value





/*
 * Figuring out which data to ask user by, by creating an associated widget for
 * each [field] in "app.hl" file.
 *
 * Notice, we do some "expression magic" here, to make sure all textbox fields are
 * added first, then textarea fields, then select fields, then radio field, before 
 * finally all other types of fields (only checkbox type left at that point though).
 */
_first:bool:true
for-each:x:/@load-file/*/*/field(/*/type/=text/.|/type/=/textarea/.|/type/=select/.|/type/=/radio/.|/*/.)

  /*
   * Figuring out type of field, and creating an associated widget accordingly.
   */
  switch:x:/@_dp/#/*/type?value

    /*
     * Single line textbox type of data.
     */
    case:text

      /*
       * Checking if this is our first iteration.
       */
      if:x:/@_first?value
        add:x:/..case/*/add/*/*/*/*/input
          src
            oninit
              micro.page.set-focus:x:/../*/_event?value
        set:x:/@_first?value
          src:bool:false

      /*
       * Checking if value argument was supplied.
       */
      if:x:/@.signal/--/{0}?value
        :x:/@_dp/#/*/name?value

        /*
         * Value for widget was provided.
         */
        eval-x:x:/+/*/*
        add:x:/..case/*/add/*/*/*/*/input
          src
            value:x:/@.signal/--/{0}?value
              :x:/@_dp/#/*/name?value

      /*
       * Adding widget to modal window.
       */
      eval-x:x:/+/*/*/*/*/*(/innerValue|/placeholder|/.data-field)
      add:x:/../*/return
        src
          div
            class:strip fill
            widgets
              label
                innerValue:x:/@_dp/#/*/name?value
                class:capitalize
              input
                type:text
                placeholder:{0} ...
                  :x:/@_dp/#/*/name?value
                .data-field:x:/@_dp/#/*/name?value
                onkeydown:@"if (event.keyCode == 13) {p5.$('camphora-save-new-record-button').raise('onclick');return false;}"

    /*
     * Multi line textbox type of data.
     */
    case:textarea

      /*
       * Checking if this is our first iteration.
       */
      if:x:/@_first?value
        add:x:/..case/*/add/*/*
          src
            oninit
              micro.page.set-focus:x:/../*/_event?value
        set:x:/@_first?value
          src:bool:false

      /*
       * Checking if value argument was supplied.
       */
      if:x:/@.signal/--/{0}?value
        :x:/@_dp/#/*/name?value

        /*
         * Value for widget was provided.
         */
        eval-x:x:/+/*/*
        add:x:/..case/*/add/*/*/literal
          src
            innerValue:x:/@.signal/--/{0}?value
              :x:/@_dp/#/*/name?value

      /*
       * Adding widget to modal window.
       */
      eval-x:x:/+/*/*/*(/placeholder|/.data-field)
      add:x:/../*/return
        src
          literal
            element:textarea
            class:fill
            rows:5
            placeholder:{0} ...
              :x:/@_dp/#/*/name?value
            .data-field:x:/@_dp/#/*/name?value

    /*
     * Select type of data.
     */
    case:select

      /*
       * Adding each option for select field.
       */
      for-each:x:/@_dp/#/*/type/*

        /*
         * Checking if value argument was supplied.
         */
        if:x:/@.signal/--/{0}?value
          :x:/..for-each/@_dp/#/*/name?value
          and:x:/@_dp/#?name
            =:x:/@.signal/--/{0}?value
              :x:/..for-each/@_dp/#/*/name?value
          add:x:/..for-each/*/add/*/*
            src:selected

        /*
         * Adding option element to select dropdown list.
         */
        eval-x:x:/+/*/*/*/innerValue
        add:x:/..case/*/add/*/*/*/widgets/*/select/*/widgets
          src
            option
              innerValue:x:/@_dp/#?name

      /*
       * Now adding option element to modal widget.
       */
      eval-x:x:/+/*/*/*/*/*(/innerValue|/.data-field)
      add:x:/../*/return
        src
          div
            class:strip fill
            widgets
              label
                innerValue:x:/@_dp/#/*/name?value
                class:capitalize
              select
                class:fill
                .data-field:x:/@_dp/#/*/name?value
                widgets

    /*
     * Checkbox type of data.
     */
    case:checkbox

      /*
       * Checking if value argument was supplied, and it was checked.
       */
      if:x:/@.signal/--/{0}?value
        :x:/@_dp/#/*/name?value
        =:int:1

        /*
         * Value for widget was provided.
         */
        add:x:/..case/*/add/*/*/*/*/input
          src:checked

      /*
       * Adding widget to modal window.
       */
      eval-x:x:/+/*/*/*/*/*(/innerValue|/.data-field)
      add:x:/../*/return
        src
          div
            widgets
              input
                type:checkbox
                .data-field:x:/@_dp/#/*/name?value
              label
                innerValue:x:/@_dp/#/*/name?value
                class:capitalize

    /*
     * Radiobutton type of data.
     */
    case:radio

      /*
       * Adding each option for radiobutton field.
       */
      _first:bool:true
      for-each:x:/@_dp/#/*/type/*

        /*
         * Checking if value argument was supplied.
         */
        if:x:/@.signal/--/{0}?value
          :x:/..for-each/@_dp/#/*/name?value
          and:x:/@_dp/#?name
            =:x:/@.signal/--/{0}?value
              :x:/..for-each/@_dp/#/*/name?value
          add:x:/..for-each/*/add/*/*/input
            src:checked

        /*
         * Making sure first radiobutton becomes checked by default, unless a
         * value for group was supplied by caller.
         */
        if:x:/@_first?value
          and:x:/@.signal/--/{0}?value
            :x:/..for-each/@_dp/#/*/name?value
            not
          add:x:/..for-each/*/add/*/*/input
            src:checked
          set:x:/@_first?value
            src:bool:false

        /*
         * Adding radio button to modal widget.
         */
        eval-x:x:/+/*/*/*(/name|/.data-value|/innerValue)
        add:x:/..case/*/add/*/*/*/widgets
          src
            input
              type:radio
              name:x:/@for-each/@_dp/#/*/name?value
              .data-value:x:/@_dp/#?name
            label
              innerValue:x:/@_dp/#?name
              class:capitalize

      /*
       * Now adding radiobutton group widget to modal widget.
       */
      add:x:/../*/return
        src
          div
            widgets





/*
 * Returning items to caller.
 */
return
